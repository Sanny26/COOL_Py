
# yacctab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNrightNOTnonassocLTEQLTEQleftPLUSMINUSleftMULTIPLYDIVIDErightISVOIDrightINT_COMPleftATleftDOTID TYPE INTEGER STRING BOOLEAN LPAREN RPAREN LBRACE RBRACE COLON COMMA DOT SEMICOLON AT PLUS MINUS MULTIPLY DIVIDE EQ LT LTEQ ASSIGN INT_COMP NOT ARROW NEW SELF OF INHERITS LOOP WHILE CASE ELSE CLASS IN ISVOID POOL ESAC FI THEN LET IF\n        program : class_list\n        \n        class_list : class_list class SEMICOLON\n                   | class SEMICOLON\n        \n        class : CLASS TYPE LBRACE features_list_opt RBRACE\n        \n        class : CLASS TYPE INHERITS TYPE LBRACE features_list_opt RBRACE\n        \n        features_list_opt : features_list\n                          | empty\n        \n        features_list : features_list feature SEMICOLON\n                      | feature SEMICOLON\n        \n        feature : ID LPAREN formal_params_list RPAREN COLON TYPE LBRACE expression RBRACE\n        \n        feature : ID LPAREN RPAREN COLON TYPE LBRACE expression RBRACE\n        \n        feature : ID COLON TYPE ASSIGN expression\n        \n        feature : ID COLON TYPE\n        \n        formal_params_list  : formal_params_list COMMA formal_param\n                            | formal_param\n        \n        formal_param : ID COLON TYPE\n        \n        expression : ID\n        \n        expression : INTEGER\n        \n        expression : BOOLEAN\n        \n        expression : STRING\n        \n        expression  : SELF\n        \n        expression : LBRACE block_list RBRACE\n        \n        block_list : block_list expression SEMICOLON\n                   | expression SEMICOLON\n        \n        expression : ID ASSIGN expression\n        \n        expression : expression DOT ID LPAREN arguments_list_opt RPAREN\n        \n        arguments_list_opt : arguments_list\n                           | empty\n        \n        arguments_list : arguments_list COMMA expression\n                       | expression\n        \n        expression : expression AT TYPE DOT ID LPAREN arguments_list_opt RPAREN\n        \n        expression : ID LPAREN arguments_list_opt RPAREN\n        \n        expression : expression PLUS expression\n                   | expression MINUS expression\n                   | expression MULTIPLY expression\n                   | expression DIVIDE expression\n        \n        expression : expression LT expression\n                   | expression LTEQ expression\n                   | expression EQ expression\n        \n        expression : LPAREN expression RPAREN\n        \n        expression : IF expression THEN expression ELSE expression FI\n        \n        expression : WHILE expression LOOP expression POOL\n        \n         expression : let_expression\n        \n        let_expression : LET ID COLON TYPE IN expression\n                       | nested_lets COMMA LET ID COLON TYPE\n        \n        let_expression : LET ID COLON TYPE ASSIGN expression IN expression\n                       | nested_lets COMMA LET ID COLON TYPE ASSIGN expression\n        \n        nested_lets : ID COLON TYPE IN expression\n                    | nested_lets COMMA ID COLON TYPE\n        \n        nested_lets : ID COLON TYPE ASSIGN expression IN expression\n                    | nested_lets COMMA ID COLON TYPE ASSIGN expression\n        \n        expression : CASE expression OF actions_list ESAC\n        \n        actions_list : actions_list action\n                     | action\n        \n        action : ID COLON TYPE ARROW expression SEMICOLON\n        \n        expression : NEW TYPE\n        \n        expression : ISVOID expression\n        \n        expression : INT_COMP expression\n        \n        expression : NOT expression\n        \n        empty :\n        '
    
_lr_action_items = {'INTEGER':([30,36,38,41,43,48,49,50,51,59,60,61,62,63,66,67,69,78,80,83,93,97,99,109,111,113,120,121,122,130,131,132,144,149,151,153,155,157,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-24,44,44,44,44,-23,44,44,44,44,44,44,44,44,44,44,44,44,]),'AT':([37,39,42,44,45,47,52,58,68,71,72,73,74,75,76,77,84,85,86,87,88,91,92,94,95,98,101,103,110,115,116,123,126,133,135,137,138,139,143,145,146,147,150,154,156,158,159,160,161,162,],[65,-21,-19,-18,-43,-20,-17,65,65,65,65,-56,65,65,65,65,65,65,65,65,65,65,65,65,-22,-40,65,65,65,65,65,-32,65,-42,-52,65,65,65,-26,65,65,65,-45,-41,65,65,-31,65,65,65,]),'ELSE':([39,42,44,45,47,52,58,71,72,73,84,85,86,87,88,91,92,95,98,101,115,123,133,135,143,146,150,154,159,160,162,],[-21,-19,-18,-43,-20,-17,-58,-59,-57,-56,-39,-37,-33,-35,-38,-36,-34,-22,-40,-25,132,-32,-42,-52,-26,-44,-45,-41,-31,-46,-47,]),'INT_COMP':([30,36,38,41,43,48,49,50,51,59,60,61,62,63,66,67,69,78,80,83,93,97,99,109,111,113,120,121,122,130,131,132,144,149,151,153,155,157,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-24,36,36,36,36,-23,36,36,36,36,36,36,36,36,36,36,36,36,]),'COLON':([13,27,28,31,52,70,108,117,124,],[18,33,34,54,79,96,125,134,140,]),'IN':([39,42,44,45,47,52,58,71,72,73,84,85,86,87,88,91,92,95,98,101,102,114,123,133,135,137,143,145,146,150,154,159,160,162,],[-21,-19,-18,-43,-20,-17,-58,-59,-57,-56,-39,-37,-33,-35,-38,-36,-34,-22,-40,-25,121,131,-32,-42,-52,149,-26,153,-44,-45,-41,-31,-46,-47,]),'BOOLEAN':([30,36,38,41,43,48,49,50,51,59,60,61,62,63,66,67,69,78,80,83,93,97,99,109,111,113,120,121,122,130,131,132,144,149,151,153,155,157,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-24,42,42,42,42,-23,42,42,42,42,42,42,42,42,42,42,42,42,]),'EQ':([37,39,42,44,45,47,52,58,68,71,72,73,74,75,76,77,84,85,86,87,88,91,92,94,95,98,101,103,110,115,116,123,126,133,135,137,138,139,143,145,146,147,150,154,156,158,159,160,161,162,],[59,-21,-19,-18,-43,-20,-17,-58,59,59,-57,-56,59,59,59,59,None,None,-33,-35,None,-36,-34,59,-22,-40,59,59,59,59,59,-32,59,-42,-52,59,59,59,-26,59,59,59,-45,-41,59,59,-31,59,59,59,]),'INHERITS':([6,],[10,]),'NEW':([30,36,38,41,43,48,49,50,51,59,60,61,62,63,66,67,69,78,80,83,93,97,99,109,111,113,120,121,122,130,131,132,144,149,151,153,155,157,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-24,46,46,46,46,-23,46,46,46,46,46,46,46,46,46,46,46,46,]),'FI':([39,42,44,45,47,52,58,71,72,73,84,85,86,87,88,91,92,95,98,101,123,133,135,143,146,147,150,154,159,160,162,],[-21,-19,-18,-43,-20,-17,-58,-59,-57,-56,-39,-37,-33,-35,-38,-36,-34,-22,-40,-25,-32,-42,-52,-26,-44,154,-45,-41,-31,-46,-47,]),'ASSIGN':([24,52,102,114,141,150,],[30,78,120,130,151,157,]),'STRING':([30,36,38,41,43,48,49,50,51,59,60,61,62,63,66,67,69,78,80,83,93,97,99,109,111,113,120,121,122,130,131,132,144,149,151,153,155,157,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-24,47,47,47,47,-23,47,47,47,47,47,47,47,47,47,47,47,47,]),'LOOP':([39,42,44,45,47,52,58,71,72,73,76,84,85,86,87,88,91,92,95,98,101,123,133,135,143,146,150,154,159,160,162,],[-21,-19,-18,-43,-20,-17,-58,-59,-57,-56,99,-39,-37,-33,-35,-38,-36,-34,-22,-40,-25,-32,-42,-52,-26,-44,-45,-41,-31,-46,-47,]),'NOT':([30,36,38,41,43,48,49,50,51,59,60,61,62,63,66,67,69,78,80,83,93,97,99,109,111,113,120,121,122,130,131,132,144,149,151,153,155,157,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-24,41,41,41,41,-23,41,41,41,41,41,41,41,41,41,41,41,41,]),'LET':([30,36,38,41,43,48,49,50,51,59,60,61,62,63,66,67,69,78,80,81,83,93,97,99,109,111,113,120,121,122,130,131,132,144,149,151,153,155,157,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,107,40,-24,40,40,40,40,-23,40,40,40,40,40,40,40,40,40,40,40,40,]),'RBRACE':([9,11,12,15,20,22,23,29,39,42,44,45,47,52,58,69,71,72,73,84,85,86,87,88,91,92,93,95,98,101,110,113,123,126,133,135,143,146,150,154,159,160,162,],[-60,-6,-7,21,-9,-60,-8,35,-21,-19,-18,-43,-20,-17,-58,95,-59,-57,-56,-39,-37,-33,-35,-38,-36,-34,-24,-22,-40,-25,127,-23,-32,142,-42,-52,-26,-44,-45,-41,-31,-46,-47,]),'OF':([39,42,44,45,47,52,58,71,72,73,77,84,85,86,87,88,91,92,95,98,101,123,133,135,143,146,150,154,159,160,162,],[-21,-19,-18,-43,-20,-17,-58,-59,-57,-56,100,-39,-37,-33,-35,-38,-36,-34,-22,-40,-25,-32,-42,-52,-26,-44,-45,-41,-31,-46,-47,]),'CLASS':([0,2,7,8,],[3,3,-3,-2,]),'ARROW':([148,],[155,]),'IF':([30,36,38,41,43,48,49,50,51,59,60,61,62,63,66,67,69,78,80,83,93,97,99,109,111,113,120,121,122,130,131,132,144,149,151,153,155,157,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-24,48,48,48,48,-23,48,48,48,48,48,48,48,48,48,48,48,48,]),'POOL':([39,42,44,45,47,52,58,71,72,73,84,85,86,87,88,91,92,95,98,101,116,123,133,135,143,146,150,154,159,160,162,],[-21,-19,-18,-43,-20,-17,-58,-59,-57,-56,-39,-37,-33,-35,-38,-36,-34,-22,-40,-25,133,-32,-42,-52,-26,-44,-45,-41,-31,-46,-47,]),'LT':([37,39,42,44,45,47,52,58,68,71,72,73,74,75,76,77,84,85,86,87,88,91,92,94,95,98,101,103,110,115,116,123,126,133,135,137,138,139,143,145,146,147,150,154,156,158,159,160,161,162,],[60,-21,-19,-18,-43,-20,-17,-58,60,60,-57,-56,60,60,60,60,None,None,-33,-35,None,-36,-34,60,-22,-40,60,60,60,60,60,-32,60,-42,-52,60,60,60,-26,60,60,60,-45,-41,60,60,-31,60,60,60,]),'PLUS':([37,39,42,44,45,47,52,58,68,71,72,73,74,75,76,77,84,85,86,87,88,91,92,94,95,98,101,103,110,115,116,123,126,133,135,137,138,139,143,145,146,147,150,154,156,158,159,160,161,162,],[61,-21,-19,-18,-43,-20,-17,-58,61,61,-57,-56,61,61,61,61,61,61,-33,-35,61,-36,-34,61,-22,-40,61,61,61,61,61,-32,61,-42,-52,61,61,61,-26,61,61,61,-45,-41,61,61,-31,61,61,61,]),'SEMICOLON':([4,5,14,17,21,24,35,37,39,42,44,45,47,52,58,68,71,72,73,84,85,86,87,88,91,92,94,95,98,101,123,127,133,135,142,143,146,150,154,159,160,161,162,],[7,8,20,23,-4,-13,-5,-12,-21,-19,-18,-43,-20,-17,-58,93,-59,-57,-56,-39,-37,-33,-35,-38,-36,-34,113,-22,-40,-25,-32,-11,-42,-52,-10,-26,-44,-45,-41,-31,-46,163,-47,]),'THEN':([39,42,44,45,47,52,58,71,72,73,74,84,85,86,87,88,91,92,95,98,101,123,133,135,143,146,150,154,159,160,162,],[-21,-19,-18,-43,-20,-17,-58,-59,-57,-56,97,-39,-37,-33,-35,-38,-36,-34,-22,-40,-25,-32,-42,-52,-26,-44,-45,-41,-31,-46,-47,]),'TYPE':([3,10,18,33,34,46,54,65,79,96,125,134,140,],[6,16,24,56,57,73,82,90,102,114,141,148,150,]),'LPAREN':([13,30,36,38,41,43,48,49,50,51,52,59,60,61,62,63,66,67,69,78,80,83,89,93,97,99,109,111,113,120,121,122,129,130,131,132,144,149,151,153,155,157,],[19,49,49,49,49,49,49,49,49,49,80,49,49,49,49,49,49,49,49,49,49,49,111,-24,49,49,49,49,-23,49,49,49,144,49,49,49,49,49,49,49,49,49,]),'MULTIPLY':([37,39,42,44,45,47,52,58,68,71,72,73,74,75,76,77,84,85,86,87,88,91,92,94,95,98,101,103,110,115,116,123,126,133,135,137,138,139,143,145,146,147,150,154,156,158,159,160,161,162,],[62,-21,-19,-18,-43,-20,-17,-58,62,62,-57,-56,62,62,62,62,62,62,62,-35,62,-36,62,62,-22,-40,62,62,62,62,62,-32,62,-42,-52,62,62,62,-26,62,62,62,-45,-41,62,62,-31,62,62,62,]),'SELF':([30,36,38,41,43,48,49,50,51,59,60,61,62,63,66,67,69,78,80,83,93,97,99,109,111,113,120,121,122,130,131,132,144,149,151,153,155,157,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-24,39,39,39,39,-23,39,39,39,39,39,39,39,39,39,39,39,39,]),'RPAREN':([19,25,26,39,42,44,45,47,52,55,56,58,71,72,73,75,80,84,85,86,87,88,91,92,95,98,101,103,104,105,106,111,123,128,133,135,139,143,144,146,150,152,154,159,160,162,],[28,-15,31,-21,-19,-18,-43,-20,-17,-14,-16,-58,-59,-57,-56,98,-60,-39,-37,-33,-35,-38,-36,-34,-22,-40,-25,-30,-27,-28,123,-60,-32,143,-42,-52,-29,-26,-60,-44,-45,159,-41,-31,-46,-47,]),'WHILE':([30,36,38,41,43,48,49,50,51,59,60,61,62,63,66,67,69,78,80,83,93,97,99,109,111,113,120,121,122,130,131,132,144,149,151,153,155,157,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-24,50,50,50,50,-23,50,50,50,50,50,50,50,50,50,50,50,50,]),'LTEQ':([37,39,42,44,45,47,52,58,68,71,72,73,74,75,76,77,84,85,86,87,88,91,92,94,95,98,101,103,110,115,116,123,126,133,135,137,138,139,143,145,146,147,150,154,156,158,159,160,161,162,],[63,-21,-19,-18,-43,-20,-17,-58,63,63,-57,-56,63,63,63,63,None,None,-33,-35,None,-36,-34,63,-22,-40,63,63,63,63,63,-32,63,-42,-52,63,63,63,-26,63,63,63,-45,-41,63,63,-31,63,63,63,]),'CASE':([30,36,38,41,43,48,49,50,51,59,60,61,62,63,66,67,69,78,80,83,93,97,99,109,111,113,120,121,122,130,131,132,144,149,151,153,155,157,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-24,51,51,51,51,-23,51,51,51,51,51,51,51,51,51,51,51,51,]),'ESAC':([118,119,136,163,],[-54,135,-53,-55,]),'DIVIDE':([37,39,42,44,45,47,52,58,68,71,72,73,74,75,76,77,84,85,86,87,88,91,92,94,95,98,101,103,110,115,116,123,126,133,135,137,138,139,143,145,146,147,150,154,156,158,159,160,161,162,],[66,-21,-19,-18,-43,-20,-17,-58,66,66,-57,-56,66,66,66,66,66,66,66,-35,66,-36,66,66,-22,-40,66,66,66,66,66,-32,66,-42,-52,66,66,66,-26,66,66,66,-45,-41,66,66,-31,66,66,66,]),'ID':([9,11,19,20,22,23,30,32,36,38,40,41,43,48,49,50,51,59,60,61,62,63,64,66,67,69,78,80,81,83,93,97,99,100,107,109,111,112,113,118,119,120,121,122,130,131,132,136,144,149,151,153,155,157,163,],[13,13,27,-9,13,-8,52,27,52,52,70,52,52,52,52,52,52,52,52,52,52,52,89,52,52,52,52,52,108,52,-24,52,52,117,124,52,52,129,-23,-54,117,52,52,52,52,52,52,-53,52,52,52,52,52,52,-55,]),'$end':([1,2,7,8,],[0,-1,-3,-2,]),'ISVOID':([30,36,38,41,43,48,49,50,51,59,60,61,62,63,66,67,69,78,80,83,93,97,99,109,111,113,120,121,122,130,131,132,144,149,151,153,155,157,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-24,43,43,43,43,-23,43,43,43,43,43,43,43,43,43,43,43,43,]),'MINUS':([37,39,42,44,45,47,52,58,68,71,72,73,74,75,76,77,84,85,86,87,88,91,92,94,95,98,101,103,110,115,116,123,126,133,135,137,138,139,143,145,146,147,150,154,156,158,159,160,161,162,],[67,-21,-19,-18,-43,-20,-17,-58,67,67,-57,-56,67,67,67,67,67,67,-33,-35,67,-36,-34,67,-22,-40,67,67,67,67,67,-32,67,-42,-52,67,67,67,-26,67,67,67,-45,-41,67,67,-31,67,67,67,]),'COMMA':([25,26,39,42,44,45,47,52,53,55,56,58,71,72,73,84,85,86,87,88,91,92,95,98,101,103,104,123,133,135,138,139,141,143,146,150,154,156,158,159,160,162,],[-15,32,-21,-19,-18,-43,-20,-17,81,-14,-16,-58,-59,-57,-56,-39,-37,-33,-35,-38,-36,-34,-22,-40,-25,-30,122,-32,-42,-52,-48,-29,-49,-26,-44,-45,-41,-50,-51,-31,-46,-47,]),'LBRACE':([6,16,30,36,38,41,43,48,49,50,51,57,59,60,61,62,63,66,67,69,78,80,82,83,93,97,99,109,111,113,120,121,122,130,131,132,144,149,151,153,155,157,],[9,22,38,38,38,38,38,38,38,38,38,83,38,38,38,38,38,38,38,38,38,38,109,38,-24,38,38,38,38,-23,38,38,38,38,38,38,38,38,38,38,38,38,]),'DOT':([37,39,42,44,45,47,52,58,68,71,72,73,74,75,76,77,84,85,86,87,88,90,91,92,94,95,98,101,103,110,115,116,123,126,133,135,137,138,139,143,145,146,147,150,154,156,158,159,160,161,162,],[64,-21,-19,-18,-43,-20,-17,64,64,64,64,-56,64,64,64,64,64,64,64,64,64,112,64,64,64,-22,-40,64,64,64,64,64,-32,64,-42,-52,64,64,64,-26,64,64,64,-45,-41,64,64,-31,64,64,64,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'formal_params_list':([19,],[26,]),'class_list':([0,],[2,]),'action':([100,119,],[118,136,]),'arguments_list_opt':([80,111,144,],[106,128,152,]),'let_expression':([30,36,38,41,43,48,49,50,51,59,60,61,62,63,66,67,69,78,80,83,97,99,109,111,120,121,122,130,131,132,144,149,151,153,155,157,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'arguments_list':([80,111,144,],[104,104,104,]),'expression':([30,36,38,41,43,48,49,50,51,59,60,61,62,63,66,67,69,78,80,83,97,99,109,111,120,121,122,130,131,132,144,149,151,153,155,157,],[37,58,68,71,72,74,75,76,77,84,85,86,87,88,91,92,94,101,103,110,115,116,126,103,137,138,139,145,146,147,103,156,158,160,161,162,]),'formal_param':([19,32,],[25,55,]),'block_list':([38,],[69,]),'empty':([9,22,80,111,144,],[12,12,105,105,105,]),'class':([0,2,],[4,5,]),'nested_lets':([30,36,38,41,43,48,49,50,51,59,60,61,62,63,66,67,69,78,80,83,97,99,109,111,120,121,122,130,131,132,144,149,151,153,155,157,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'features_list':([9,22,],[11,11,]),'feature':([9,11,22,],[14,17,14,]),'features_list_opt':([9,22,],[15,29,]),'actions_list':([100,],[119,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class_list','program',1,'p_program','parser.py',100),
  ('class_list -> class_list class SEMICOLON','class_list',3,'p_class_list','parser.py',107),
  ('class_list -> class SEMICOLON','class_list',2,'p_class_list','parser.py',108),
  ('class -> CLASS TYPE LBRACE features_list_opt RBRACE','class',5,'p_class','parser.py',117),
  ('class -> CLASS TYPE INHERITS TYPE LBRACE features_list_opt RBRACE','class',7,'p_class_inherits','parser.py',123),
  ('features_list_opt -> features_list','features_list_opt',1,'p_feature_list_opt','parser.py',129),
  ('features_list_opt -> empty','features_list_opt',1,'p_feature_list_opt','parser.py',130),
  ('features_list -> features_list feature SEMICOLON','features_list',3,'p_feature_list','parser.py',136),
  ('features_list -> feature SEMICOLON','features_list',2,'p_feature_list','parser.py',137),
  ('feature -> ID LPAREN formal_params_list RPAREN COLON TYPE LBRACE expression RBRACE','feature',9,'p_feature_method','parser.py',146),
  ('feature -> ID LPAREN RPAREN COLON TYPE LBRACE expression RBRACE','feature',8,'p_feature_method_no_formals','parser.py',152),
  ('feature -> ID COLON TYPE ASSIGN expression','feature',5,'p_feature_attr_initialized','parser.py',158),
  ('feature -> ID COLON TYPE','feature',3,'p_feature_attr','parser.py',164),
  ('formal_params_list -> formal_params_list COMMA formal_param','formal_params_list',3,'p_formal_list_many','parser.py',170),
  ('formal_params_list -> formal_param','formal_params_list',1,'p_formal_list_many','parser.py',171),
  ('formal_param -> ID COLON TYPE','formal_param',3,'p_formal','parser.py',180),
  ('expression -> ID','expression',1,'p_expression_object_identifier','parser.py',186),
  ('expression -> INTEGER','expression',1,'p_expression_integer_constant','parser.py',192),
  ('expression -> BOOLEAN','expression',1,'p_expression_boolean_constant','parser.py',198),
  ('expression -> STRING','expression',1,'p_expression_string_constant','parser.py',204),
  ('expression -> SELF','expression',1,'p_expr_self','parser.py',210),
  ('expression -> LBRACE block_list RBRACE','expression',3,'p_expression_block','parser.py',216),
  ('block_list -> block_list expression SEMICOLON','block_list',3,'p_block_list','parser.py',222),
  ('block_list -> expression SEMICOLON','block_list',2,'p_block_list','parser.py',223),
  ('expression -> ID ASSIGN expression','expression',3,'p_expression_assignment','parser.py',232),
  ('expression -> expression DOT ID LPAREN arguments_list_opt RPAREN','expression',6,'p_expression_dispatch','parser.py',240),
  ('arguments_list_opt -> arguments_list','arguments_list_opt',1,'p_arguments_list_opt','parser.py',246),
  ('arguments_list_opt -> empty','arguments_list_opt',1,'p_arguments_list_opt','parser.py',247),
  ('arguments_list -> arguments_list COMMA expression','arguments_list',3,'p_arguments_list','parser.py',253),
  ('arguments_list -> expression','arguments_list',1,'p_arguments_list','parser.py',254),
  ('expression -> expression AT TYPE DOT ID LPAREN arguments_list_opt RPAREN','expression',8,'p_expression_static_dispatch','parser.py',263),
  ('expression -> ID LPAREN arguments_list_opt RPAREN','expression',4,'p_expression_self_dispatch','parser.py',269),
  ('expression -> expression PLUS expression','expression',3,'p_expression_math_operations','parser.py',277),
  ('expression -> expression MINUS expression','expression',3,'p_expression_math_operations','parser.py',278),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_math_operations','parser.py',279),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_math_operations','parser.py',280),
  ('expression -> expression LT expression','expression',3,'p_expression_math_comparisons','parser.py',293),
  ('expression -> expression LTEQ expression','expression',3,'p_expression_math_comparisons','parser.py',294),
  ('expression -> expression EQ expression','expression',3,'p_expression_math_comparisons','parser.py',295),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_with_parenthesis','parser.py',306),
  ('expression -> IF expression THEN expression ELSE expression FI','expression',7,'p_expression_if_conditional','parser.py',314),
  ('expression -> WHILE expression LOOP expression POOL','expression',5,'p_expression_while_loop','parser.py',320),
  ('expression -> let_expression','expression',1,'p_expression_let','parser.py',328),
  ('let_expression -> LET ID COLON TYPE IN expression','let_expression',6,'p_expression_let_simple','parser.py',334),
  ('let_expression -> nested_lets COMMA LET ID COLON TYPE','let_expression',6,'p_expression_let_simple','parser.py',335),
  ('let_expression -> LET ID COLON TYPE ASSIGN expression IN expression','let_expression',8,'p_expression_let_initialized','parser.py',341),
  ('let_expression -> nested_lets COMMA LET ID COLON TYPE ASSIGN expression','let_expression',8,'p_expression_let_initialized','parser.py',342),
  ('nested_lets -> ID COLON TYPE IN expression','nested_lets',5,'p_inner_lets_simple','parser.py',348),
  ('nested_lets -> nested_lets COMMA ID COLON TYPE','nested_lets',5,'p_inner_lets_simple','parser.py',349),
  ('nested_lets -> ID COLON TYPE ASSIGN expression IN expression','nested_lets',7,'p_inner_lets_initialized','parser.py',355),
  ('nested_lets -> nested_lets COMMA ID COLON TYPE ASSIGN expression','nested_lets',7,'p_inner_lets_initialized','parser.py',356),
  ('expression -> CASE expression OF actions_list ESAC','expression',5,'p_expression_case','parser.py',364),
  ('actions_list -> actions_list action','actions_list',2,'p_actions_list','parser.py',370),
  ('actions_list -> action','actions_list',1,'p_actions_list','parser.py',371),
  ('action -> ID COLON TYPE ARROW expression SEMICOLON','action',6,'p_action_expr','parser.py',380),
  ('expression -> NEW TYPE','expression',2,'p_expression_new','parser.py',388),
  ('expression -> ISVOID expression','expression',2,'p_expression_isvoid','parser.py',394),
  ('expression -> INT_COMP expression','expression',2,'p_expression_integer_complement','parser.py',400),
  ('expression -> NOT expression','expression',2,'p_expression_boolean_complement','parser.py',406),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',414),
]
