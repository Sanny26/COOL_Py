
# yacctab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNrightNOTnonassocLTEQLTEQleftPLUSMINUSleftMULTIPLYDIVIDErightISVOIDrightINT_COMPleftATleftDOTID TYPE INTEGER STRING BOOLEAN LPAREN RPAREN LBRACE RBRACE COLON COMMA DOT SEMICOLON AT PLUS MINUS MULTIPLY DIVIDE EQ LT LTEQ ASSIGN INT_COMP NOT ARROW IN SELF IF CLASS POOL OF ESAC WHILE INHERITS CASE THEN NEW LOOP ELSE FI ISVOID LET\n        program : class_list\n        \n        class_list : class_list class SEMICOLON\n                   | class SEMICOLON\n        \n        class : CLASS TYPE LBRACE features_list_opt RBRACE\n        \n        class : CLASS TYPE INHERITS TYPE LBRACE features_list_opt RBRACE\n        \n        features_list_opt : features_list\n                          | empty\n        \n        features_list : features_list feature SEMICOLON\n                      | feature SEMICOLON\n        \n        feature : ID LPAREN formal_params_list RPAREN COLON TYPE LBRACE expression RBRACE\n        \n        feature : ID LPAREN RPAREN COLON TYPE LBRACE expression RBRACE\n        \n        feature : ID COLON TYPE ASSIGN expression\n        \n        feature : ID COLON TYPE\n        \n        formal_params_list  : formal_params_list COMMA formal_param\n                            | formal_param\n        \n        formal_param : ID COLON TYPE\n        \n        expression : ID\n        \n        expression : INTEGER\n        \n        expression : BOOLEAN\n        \n        expression : STRING\n        \n        expression  : SELF\n        \n        expression : LBRACE block_list RBRACE\n        \n        block_list : block_list expression SEMICOLON\n                   | expression SEMICOLON\n        \n        expression : ID ASSIGN expression\n        \n        expression : expression DOT ID LPAREN arguments_list_opt RPAREN\n        \n        arguments_list_opt : arguments_list\n                           | empty\n        \n        arguments_list : arguments_list COMMA expression\n                       | expression\n        \n        expression : expression AT TYPE DOT ID LPAREN arguments_list_opt RPAREN\n        \n        expression : ID LPAREN arguments_list_opt RPAREN\n        \n        expression : expression PLUS expression\n                   | expression MINUS expression\n                   | expression MULTIPLY expression\n                   | expression DIVIDE expression\n        \n        expression : expression LT expression\n                   | expression LTEQ expression\n                   | expression EQ expression\n        \n        expression : LPAREN expression RPAREN\n        \n        expression : IF expression THEN expression ELSE expression FI\n        \n        expression : WHILE expression LOOP expression POOL\n        \n         expression : let_expression\n        \n        let_expression : LET ID COLON TYPE IN expression\n                       | nested_lets COMMA LET ID COLON TYPE\n        \n        let_expression : LET ID COLON TYPE ASSIGN expression IN expression\n                       | nested_lets COMMA LET ID COLON TYPE ASSIGN expression\n        \n        nested_lets : ID COLON TYPE IN expression\n                    | nested_lets COMMA ID COLON TYPE\n        \n        nested_lets : ID COLON TYPE ASSIGN expression IN expression\n                    | nested_lets COMMA ID COLON TYPE ASSIGN expression\n        \n        expression : CASE expression OF actions_list ESAC\n        \n        actions_list : actions_list action\n                     | action\n        \n        action : ID COLON TYPE ARROW expression SEMICOLON\n        \n        expression : NEW TYPE\n        \n        expression : ISVOID expression\n        \n        expression : INT_COMP expression\n        \n        expression : NOT expression\n        \n        empty :\n        '
    
_lr_action_items = {'MULTIPLY':([36,38,39,40,41,48,49,58,68,70,71,72,73,79,80,81,84,85,86,88,89,91,92,93,94,95,101,105,109,114,121,125,127,130,133,136,137,138,144,146,147,149,151,155,157,158,159,160,161,162,],[-18,-20,-43,60,-19,-21,-17,-57,60,60,60,60,60,-58,-56,60,60,-35,60,60,-36,60,60,-40,-22,60,60,60,60,60,-32,60,60,-42,-52,60,60,60,-26,60,60,-45,60,60,60,-41,-31,60,60,60,]),'CASE':([30,37,42,43,44,45,46,51,53,59,60,61,63,64,66,67,69,76,77,82,96,97,108,110,112,113,119,120,122,134,135,141,143,148,150,153,154,156,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-24,46,46,46,46,-23,46,46,46,46,46,46,46,46,46,46,46,46,]),'LET':([30,37,42,43,44,45,46,51,53,59,60,61,63,64,66,67,69,76,77,78,82,96,97,108,110,112,113,119,120,122,134,135,141,143,148,150,153,154,156,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,106,47,-24,47,47,47,47,-23,47,47,47,47,47,47,47,47,47,47,47,47,]),'ARROW':([145,],[153,]),'INTEGER':([30,37,42,43,44,45,46,51,53,59,60,61,63,64,66,67,69,76,77,82,96,97,108,110,112,113,119,120,122,134,135,141,143,148,150,153,154,156,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-24,36,36,36,36,-23,36,36,36,36,36,36,36,36,36,36,36,36,]),'PLUS':([36,38,39,40,41,48,49,58,68,70,71,72,73,79,80,81,84,85,86,88,89,91,92,93,94,95,101,105,109,114,121,125,127,130,133,136,137,138,144,146,147,149,151,155,157,158,159,160,161,162,],[-18,-20,-43,61,-19,-21,-17,-57,61,61,61,61,61,-58,-56,61,-34,-35,-33,61,-36,61,61,-40,-22,61,61,61,61,61,-32,61,61,-42,-52,61,61,61,-26,61,61,-45,61,61,61,-41,-31,61,61,61,]),'ISVOID':([30,37,42,43,44,45,46,51,53,59,60,61,63,64,66,67,69,76,77,82,96,97,108,110,112,113,119,120,122,134,135,141,143,148,150,153,154,156,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-24,37,37,37,37,-23,37,37,37,37,37,37,37,37,37,37,37,37,]),'SELF':([30,37,42,43,44,45,46,51,53,59,60,61,63,64,66,67,69,76,77,82,96,97,108,110,112,113,119,120,122,134,135,141,143,148,150,153,154,156,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-24,48,48,48,48,-23,48,48,48,48,48,48,48,48,48,48,48,48,]),'IF':([30,37,42,43,44,45,46,51,53,59,60,61,63,64,66,67,69,76,77,82,96,97,108,110,112,113,119,120,122,134,135,141,143,148,150,153,154,156,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-24,53,53,53,53,-23,53,53,53,53,53,53,53,53,53,53,53,53,]),'FI':([36,38,39,41,48,49,58,72,79,80,84,85,86,88,89,91,92,93,94,105,121,130,133,144,146,149,151,158,159,161,162,],[-18,-20,-43,-19,-21,-17,-57,-59,-58,-56,-34,-35,-33,-38,-36,-37,-39,-40,-22,-25,-32,-42,-52,-26,-44,-45,158,-41,-31,-46,-47,]),'CLASS':([0,3,5,8,],[4,4,-3,-2,]),'IN':([36,38,39,41,48,49,58,72,79,80,84,85,86,88,89,91,92,93,94,100,105,118,121,130,133,137,144,146,147,149,158,159,161,162,],[-18,-20,-43,-19,-21,-17,-57,-59,-58,-56,-34,-35,-33,-38,-36,-37,-39,-40,-22,119,-25,134,-32,-42,-52,148,-26,-44,154,-45,-41,-31,-46,-47,]),'LOOP':([36,38,39,41,48,49,58,71,72,79,80,84,85,86,88,89,91,92,93,94,105,121,130,133,144,146,149,158,159,161,162,],[-18,-20,-43,-19,-21,-17,-57,97,-59,-58,-56,-34,-35,-33,-38,-36,-37,-39,-40,-22,-25,-32,-42,-52,-26,-44,-45,-41,-31,-46,-47,]),'LTEQ':([36,38,39,40,41,48,49,58,68,70,71,72,73,79,80,81,84,85,86,88,89,91,92,93,94,95,101,105,109,114,121,125,127,130,133,136,137,138,144,146,147,149,151,155,157,158,159,160,161,162,],[-18,-20,-43,63,-19,-21,-17,-57,63,63,63,63,63,-58,-56,63,-34,-35,-33,None,-36,None,None,-40,-22,63,63,63,63,63,-32,63,63,-42,-52,63,63,63,-26,63,63,-45,63,63,63,-41,-31,63,63,63,]),'AT':([36,38,39,40,41,48,49,58,68,70,71,72,73,79,80,81,84,85,86,88,89,91,92,93,94,95,101,105,109,114,121,125,127,130,133,136,137,138,144,146,147,149,151,155,157,158,159,160,161,162,],[-18,-20,-43,62,-19,-21,-17,62,62,62,62,62,62,62,-56,62,62,62,62,62,62,62,62,-40,-22,62,62,62,62,62,-32,62,62,-42,-52,62,62,62,-26,62,62,-45,62,62,62,-41,-31,62,62,62,]),'ESAC':([116,117,132,163,],[-54,133,-53,-55,]),'DOT':([36,38,39,40,41,48,49,58,68,70,71,72,73,79,80,81,84,85,86,87,88,89,91,92,93,94,95,101,105,109,114,121,125,127,130,133,136,137,138,144,146,147,149,151,155,157,158,159,160,161,162,],[-18,-20,-43,65,-19,-21,-17,65,65,65,65,65,65,65,-56,65,65,65,65,111,65,65,65,65,-40,-22,65,65,65,65,65,-32,65,65,-42,-52,65,65,65,-26,65,65,-45,65,65,65,-41,-31,65,65,65,]),'STRING':([30,37,42,43,44,45,46,51,53,59,60,61,63,64,66,67,69,76,77,82,96,97,108,110,112,113,119,120,122,134,135,141,143,148,150,153,154,156,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-24,38,38,38,38,-23,38,38,38,38,38,38,38,38,38,38,38,38,]),'TYPE':([4,10,20,31,34,52,56,62,75,99,124,131,139,],[7,16,24,54,57,80,83,87,100,118,140,145,149,]),'ID':([9,11,18,21,22,23,30,32,37,42,43,44,45,46,47,51,53,59,60,61,63,64,65,66,67,69,76,77,78,82,96,97,98,106,108,110,111,112,113,116,117,119,120,122,132,134,135,141,143,148,150,153,154,156,163,],[15,15,-9,28,15,-8,49,28,49,49,49,49,49,49,74,49,49,49,49,49,49,49,90,49,49,49,49,49,107,49,-24,49,115,123,49,49,128,49,-23,-54,115,49,49,49,-53,49,49,49,49,49,49,49,49,49,-55,]),'POOL':([36,38,39,41,48,49,58,72,79,80,84,85,86,88,89,91,92,93,94,105,114,121,130,133,144,146,149,158,159,161,162,],[-18,-20,-43,-19,-21,-17,-57,-59,-58,-56,-34,-35,-33,-38,-36,-37,-39,-40,-22,-25,130,-32,-42,-52,-26,-44,-45,-41,-31,-46,-47,]),'MINUS':([36,38,39,40,41,48,49,58,68,70,71,72,73,79,80,81,84,85,86,88,89,91,92,93,94,95,101,105,109,114,121,125,127,130,133,136,137,138,144,146,147,149,151,155,157,158,159,160,161,162,],[-18,-20,-43,59,-19,-21,-17,-57,59,59,59,59,59,-58,-56,59,-34,-35,-33,59,-36,59,59,-40,-22,59,59,59,59,59,-32,59,59,-42,-52,59,59,59,-26,59,59,-45,59,59,59,-41,-31,59,59,59,]),'COLON':([15,25,28,33,49,74,107,115,123,],[20,31,34,56,75,99,124,131,139,]),'THEN':([36,38,39,41,48,49,58,72,79,80,81,84,85,86,88,89,91,92,93,94,105,121,130,133,144,146,149,158,159,161,162,],[-18,-20,-43,-19,-21,-17,-57,-59,-58,-56,108,-34,-35,-33,-38,-36,-37,-39,-40,-22,-25,-32,-42,-52,-26,-44,-45,-41,-31,-46,-47,]),'RPAREN':([21,26,27,36,38,39,41,48,49,55,57,58,68,72,76,79,80,84,85,86,88,89,91,92,93,94,101,102,103,104,105,112,121,129,130,133,138,143,144,146,149,152,158,159,161,162,],[25,33,-15,-18,-20,-43,-19,-21,-17,-14,-16,-57,93,-59,-60,-58,-56,-34,-35,-33,-38,-36,-37,-39,-40,-22,-30,-28,121,-27,-25,-60,-32,144,-42,-52,-29,-60,-26,-44,-45,159,-41,-31,-46,-47,]),'INHERITS':([7,],[10,]),'ELSE':([36,38,39,41,48,49,58,72,79,80,84,85,86,88,89,91,92,93,94,105,121,125,130,133,144,146,149,158,159,161,162,],[-18,-20,-43,-19,-21,-17,-57,-59,-58,-56,-34,-35,-33,-38,-36,-37,-39,-40,-22,-25,-32,141,-42,-52,-26,-44,-45,-41,-31,-46,-47,]),'BOOLEAN':([30,37,42,43,44,45,46,51,53,59,60,61,63,64,66,67,69,76,77,82,96,97,108,110,112,113,119,120,122,134,135,141,143,148,150,153,154,156,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-24,41,41,41,41,-23,41,41,41,41,41,41,41,41,41,41,41,41,]),'INT_COMP':([30,37,42,43,44,45,46,51,53,59,60,61,63,64,66,67,69,76,77,82,96,97,108,110,112,113,119,120,122,134,135,141,143,148,150,153,154,156,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-24,51,51,51,51,-23,51,51,51,51,51,51,51,51,51,51,51,51,]),'LT':([36,38,39,40,41,48,49,58,68,70,71,72,73,79,80,81,84,85,86,88,89,91,92,93,94,95,101,105,109,114,121,125,127,130,133,136,137,138,144,146,147,149,151,155,157,158,159,160,161,162,],[-18,-20,-43,66,-19,-21,-17,-57,66,66,66,66,66,-58,-56,66,-34,-35,-33,None,-36,None,None,-40,-22,66,66,66,66,66,-32,66,66,-42,-52,66,66,66,-26,66,66,-45,66,66,66,-41,-31,66,66,66,]),'LBRACE':([7,16,30,37,42,43,44,45,46,51,53,54,59,60,61,63,64,66,67,69,76,77,82,83,96,97,108,110,112,113,119,120,122,134,135,141,143,148,150,153,154,156,],[9,22,43,43,43,43,43,43,43,43,43,82,43,43,43,43,43,43,43,43,43,43,43,110,-24,43,43,43,43,-23,43,43,43,43,43,43,43,43,43,43,43,43,]),'RBRACE':([9,11,13,14,18,22,23,29,36,38,39,41,48,49,58,69,72,79,80,84,85,86,88,89,91,92,93,94,96,105,109,113,121,127,130,133,144,146,149,158,159,161,162,],[-60,-6,19,-7,-9,-60,-8,35,-18,-20,-43,-19,-21,-17,-57,94,-59,-58,-56,-34,-35,-33,-38,-36,-37,-39,-40,-22,-24,-25,126,-23,-32,142,-42,-52,-26,-44,-45,-41,-31,-46,-47,]),'COMMA':([26,27,36,38,39,41,48,49,50,55,57,58,72,79,80,84,85,86,88,89,91,92,93,94,101,104,105,121,130,133,136,138,140,144,146,149,155,157,158,159,161,162,],[32,-15,-18,-20,-43,-19,-21,-17,78,-14,-16,-57,-59,-58,-56,-34,-35,-33,-38,-36,-37,-39,-40,-22,-30,122,-25,-32,-42,-52,-48,-29,-49,-26,-44,-45,-50,-51,-41,-31,-46,-47,]),'OF':([36,38,39,41,48,49,58,72,73,79,80,84,85,86,88,89,91,92,93,94,105,121,130,133,144,146,149,158,159,161,162,],[-18,-20,-43,-19,-21,-17,-57,-59,98,-58,-56,-34,-35,-33,-38,-36,-37,-39,-40,-22,-25,-32,-42,-52,-26,-44,-45,-41,-31,-46,-47,]),'LPAREN':([15,30,37,42,43,44,45,46,49,51,53,59,60,61,63,64,66,67,69,76,77,82,90,96,97,108,110,112,113,119,120,122,128,134,135,141,143,148,150,153,154,156,],[21,42,42,42,42,42,42,42,76,42,42,42,42,42,42,42,42,42,42,42,42,42,112,-24,42,42,42,42,-23,42,42,42,143,42,42,42,42,42,42,42,42,42,]),'SEMICOLON':([2,6,12,17,19,24,35,36,38,39,40,41,48,49,58,70,72,79,80,84,85,86,88,89,91,92,93,94,95,105,121,126,130,133,142,144,146,149,158,159,160,161,162,],[5,8,18,23,-4,-13,-5,-18,-20,-43,-12,-19,-21,-17,-57,96,-59,-58,-56,-34,-35,-33,-38,-36,-37,-39,-40,-22,113,-25,-32,-11,-42,-52,-10,-26,-44,-45,-41,-31,163,-46,-47,]),'DIVIDE':([36,38,39,40,41,48,49,58,68,70,71,72,73,79,80,81,84,85,86,88,89,91,92,93,94,95,101,105,109,114,121,125,127,130,133,136,137,138,144,146,147,149,151,155,157,158,159,160,161,162,],[-18,-20,-43,64,-19,-21,-17,-57,64,64,64,64,64,-58,-56,64,64,-35,64,64,-36,64,64,-40,-22,64,64,64,64,64,-32,64,64,-42,-52,64,64,64,-26,64,64,-45,64,64,64,-41,-31,64,64,64,]),'WHILE':([30,37,42,43,44,45,46,51,53,59,60,61,63,64,66,67,69,76,77,82,96,97,108,110,112,113,119,120,122,134,135,141,143,148,150,153,154,156,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-24,44,44,44,44,-23,44,44,44,44,44,44,44,44,44,44,44,44,]),'NOT':([30,37,42,43,44,45,46,51,53,59,60,61,63,64,66,67,69,76,77,82,96,97,108,110,112,113,119,120,122,134,135,141,143,148,150,153,154,156,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-24,45,45,45,45,-23,45,45,45,45,45,45,45,45,45,45,45,45,]),'NEW':([30,37,42,43,44,45,46,51,53,59,60,61,63,64,66,67,69,76,77,82,96,97,108,110,112,113,119,120,122,134,135,141,143,148,150,153,154,156,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-24,52,52,52,52,-23,52,52,52,52,52,52,52,52,52,52,52,52,]),'$end':([1,3,5,8,],[0,-1,-3,-2,]),'ASSIGN':([24,49,100,118,140,149,],[30,77,120,135,150,156,]),'EQ':([36,38,39,40,41,48,49,58,68,70,71,72,73,79,80,81,84,85,86,88,89,91,92,93,94,95,101,105,109,114,121,125,127,130,133,136,137,138,144,146,147,149,151,155,157,158,159,160,161,162,],[-18,-20,-43,67,-19,-21,-17,-57,67,67,67,67,67,-58,-56,67,-34,-35,-33,None,-36,None,None,-40,-22,67,67,67,67,67,-32,67,67,-42,-52,67,67,67,-26,67,67,-45,67,67,67,-41,-31,67,67,67,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'let_expression':([30,37,42,43,44,45,46,51,53,59,60,61,63,64,66,67,69,76,77,82,97,108,110,112,119,120,122,134,135,141,143,148,150,153,154,156,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'class_list':([0,],[3,]),'formal_params_list':([21,],[26,]),'features_list':([9,22,],[11,11,]),'class':([0,3,],[2,6,]),'arguments_list':([76,112,143,],[104,104,104,]),'block_list':([43,],[69,]),'feature':([9,11,22,],[12,17,12,]),'actions_list':([98,],[117,]),'features_list_opt':([9,22,],[13,29,]),'empty':([9,22,76,112,143,],[14,14,102,102,102,]),'formal_param':([21,32,],[27,55,]),'action':([98,117,],[116,132,]),'program':([0,],[1,]),'nested_lets':([30,37,42,43,44,45,46,51,53,59,60,61,63,64,66,67,69,76,77,82,97,108,110,112,119,120,122,134,135,141,143,148,150,153,154,156,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'arguments_list_opt':([76,112,143,],[103,129,152,]),'expression':([30,37,42,43,44,45,46,51,53,59,60,61,63,64,66,67,69,76,77,82,97,108,110,112,119,120,122,134,135,141,143,148,150,153,154,156,],[40,58,68,70,71,72,73,79,81,84,85,86,88,89,91,92,95,101,105,109,114,125,127,101,136,137,138,146,147,151,101,155,157,160,161,162,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class_list','program',1,'p_program','parser.py',100),
  ('class_list -> class_list class SEMICOLON','class_list',3,'p_class_list','parser.py',107),
  ('class_list -> class SEMICOLON','class_list',2,'p_class_list','parser.py',108),
  ('class -> CLASS TYPE LBRACE features_list_opt RBRACE','class',5,'p_class','parser.py',117),
  ('class -> CLASS TYPE INHERITS TYPE LBRACE features_list_opt RBRACE','class',7,'p_class_inherits','parser.py',123),
  ('features_list_opt -> features_list','features_list_opt',1,'p_feature_list_opt','parser.py',129),
  ('features_list_opt -> empty','features_list_opt',1,'p_feature_list_opt','parser.py',130),
  ('features_list -> features_list feature SEMICOLON','features_list',3,'p_feature_list','parser.py',136),
  ('features_list -> feature SEMICOLON','features_list',2,'p_feature_list','parser.py',137),
  ('feature -> ID LPAREN formal_params_list RPAREN COLON TYPE LBRACE expression RBRACE','feature',9,'p_feature_method','parser.py',146),
  ('feature -> ID LPAREN RPAREN COLON TYPE LBRACE expression RBRACE','feature',8,'p_feature_method_no_formals','parser.py',152),
  ('feature -> ID COLON TYPE ASSIGN expression','feature',5,'p_feature_attr_initialized','parser.py',158),
  ('feature -> ID COLON TYPE','feature',3,'p_feature_attr','parser.py',164),
  ('formal_params_list -> formal_params_list COMMA formal_param','formal_params_list',3,'p_formal_list_many','parser.py',170),
  ('formal_params_list -> formal_param','formal_params_list',1,'p_formal_list_many','parser.py',171),
  ('formal_param -> ID COLON TYPE','formal_param',3,'p_formal','parser.py',180),
  ('expression -> ID','expression',1,'p_expression_object_identifier','parser.py',186),
  ('expression -> INTEGER','expression',1,'p_expression_integer_constant','parser.py',192),
  ('expression -> BOOLEAN','expression',1,'p_expression_boolean_constant','parser.py',198),
  ('expression -> STRING','expression',1,'p_expression_string_constant','parser.py',204),
  ('expression -> SELF','expression',1,'p_expr_self','parser.py',210),
  ('expression -> LBRACE block_list RBRACE','expression',3,'p_expression_block','parser.py',216),
  ('block_list -> block_list expression SEMICOLON','block_list',3,'p_block_list','parser.py',222),
  ('block_list -> expression SEMICOLON','block_list',2,'p_block_list','parser.py',223),
  ('expression -> ID ASSIGN expression','expression',3,'p_expression_assignment','parser.py',232),
  ('expression -> expression DOT ID LPAREN arguments_list_opt RPAREN','expression',6,'p_expression_dispatch','parser.py',240),
  ('arguments_list_opt -> arguments_list','arguments_list_opt',1,'p_arguments_list_opt','parser.py',246),
  ('arguments_list_opt -> empty','arguments_list_opt',1,'p_arguments_list_opt','parser.py',247),
  ('arguments_list -> arguments_list COMMA expression','arguments_list',3,'p_arguments_list','parser.py',253),
  ('arguments_list -> expression','arguments_list',1,'p_arguments_list','parser.py',254),
  ('expression -> expression AT TYPE DOT ID LPAREN arguments_list_opt RPAREN','expression',8,'p_expression_static_dispatch','parser.py',263),
  ('expression -> ID LPAREN arguments_list_opt RPAREN','expression',4,'p_expression_self_dispatch','parser.py',269),
  ('expression -> expression PLUS expression','expression',3,'p_expression_math_operations','parser.py',277),
  ('expression -> expression MINUS expression','expression',3,'p_expression_math_operations','parser.py',278),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_math_operations','parser.py',279),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_math_operations','parser.py',280),
  ('expression -> expression LT expression','expression',3,'p_expression_math_comparisons','parser.py',293),
  ('expression -> expression LTEQ expression','expression',3,'p_expression_math_comparisons','parser.py',294),
  ('expression -> expression EQ expression','expression',3,'p_expression_math_comparisons','parser.py',295),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_with_parenthesis','parser.py',306),
  ('expression -> IF expression THEN expression ELSE expression FI','expression',7,'p_expression_if_conditional','parser.py',314),
  ('expression -> WHILE expression LOOP expression POOL','expression',5,'p_expression_while_loop','parser.py',320),
  ('expression -> let_expression','expression',1,'p_expression_let','parser.py',328),
  ('let_expression -> LET ID COLON TYPE IN expression','let_expression',6,'p_expression_let_simple','parser.py',334),
  ('let_expression -> nested_lets COMMA LET ID COLON TYPE','let_expression',6,'p_expression_let_simple','parser.py',335),
  ('let_expression -> LET ID COLON TYPE ASSIGN expression IN expression','let_expression',8,'p_expression_let_initialized','parser.py',341),
  ('let_expression -> nested_lets COMMA LET ID COLON TYPE ASSIGN expression','let_expression',8,'p_expression_let_initialized','parser.py',342),
  ('nested_lets -> ID COLON TYPE IN expression','nested_lets',5,'p_inner_lets_simple','parser.py',348),
  ('nested_lets -> nested_lets COMMA ID COLON TYPE','nested_lets',5,'p_inner_lets_simple','parser.py',349),
  ('nested_lets -> ID COLON TYPE ASSIGN expression IN expression','nested_lets',7,'p_inner_lets_initialized','parser.py',355),
  ('nested_lets -> nested_lets COMMA ID COLON TYPE ASSIGN expression','nested_lets',7,'p_inner_lets_initialized','parser.py',356),
  ('expression -> CASE expression OF actions_list ESAC','expression',5,'p_expression_case','parser.py',364),
  ('actions_list -> actions_list action','actions_list',2,'p_actions_list','parser.py',370),
  ('actions_list -> action','actions_list',1,'p_actions_list','parser.py',371),
  ('action -> ID COLON TYPE ARROW expression SEMICOLON','action',6,'p_action_expr','parser.py',380),
  ('expression -> NEW TYPE','expression',2,'p_expression_new','parser.py',388),
  ('expression -> ISVOID expression','expression',2,'p_expression_isvoid','parser.py',394),
  ('expression -> INT_COMP expression','expression',2,'p_expression_integer_complement','parser.py',400),
  ('expression -> NOT expression','expression',2,'p_expression_boolean_complement','parser.py',406),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',414),
]
