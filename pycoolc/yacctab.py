
# yacctab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNrightNOTnonassocLTEQLTEQleftPLUSMINUSleftMULTIPLYDIVIDErightISVOIDrightINT_COMPleftATleftDOTID TYPE INTEGER STRING BOOLEAN LPAREN RPAREN LBRACE RBRACE COLON COMMA DOT SEMICOLON AT PLUS MINUS MULTIPLY DIVIDE EQ LT LTEQ ASSIGN INT_COMP NOT ARROW INHERITS NEW OF IN ESAC THEN IF LOOP FI CLASS SELF WHILE ELSE ISVOID POOL LET CASE\n        program : class_list\n        \n        class_list : class_list class SEMICOLON\n                   | class SEMICOLON\n        \n        class : CLASS TYPE LBRACE features_list_opt RBRACE\n        \n        class : CLASS TYPE INHERITS TYPE LBRACE features_list_opt RBRACE\n        \n        features_list_opt : features_list\n                          | empty\n        \n        features_list : features_list feature SEMICOLON\n                      | feature SEMICOLON\n        \n        feature : ID LPAREN formal_params_list RPAREN COLON TYPE LBRACE expression RBRACE\n        \n        feature : ID LPAREN RPAREN COLON TYPE LBRACE expression RBRACE\n        \n        feature : ID COLON TYPE ASSIGN expression\n        \n        feature : ID COLON TYPE\n        \n        formal_params_list  : formal_params_list COMMA formal_param\n                            | formal_param\n        \n        formal_param : ID COLON TYPE\n        \n        expression : ID\n        \n        expression : INTEGER\n        \n        expression : BOOLEAN\n        \n        expression : STRING\n        \n        expression  : SELF\n        \n        expression : LBRACE block_list RBRACE\n        \n        block_list : block_list expression SEMICOLON\n                   | expression SEMICOLON\n        \n        expression : ID ASSIGN expression\n        \n        expression : expression DOT ID LPAREN arguments_list_opt RPAREN\n        \n        arguments_list_opt : arguments_list\n                           | empty\n        \n        arguments_list : arguments_list COMMA expression\n                       | expression\n        \n        expression : expression AT TYPE DOT ID LPAREN arguments_list_opt RPAREN\n        \n        expression : ID LPAREN arguments_list_opt RPAREN\n        \n        expression : expression PLUS expression\n                   | expression MINUS expression\n                   | expression MULTIPLY expression\n                   | expression DIVIDE expression\n        \n        expression : expression LT expression\n                   | expression LTEQ expression\n                   | expression EQ expression\n        \n        expression : LPAREN expression RPAREN\n        \n        expression : IF expression THEN expression ELSE expression FI\n        \n        expression : WHILE expression LOOP expression POOL\n        \n         expression : let_expression\n        \n        let_expression : LET ID COLON TYPE IN expression\n                       | nested_lets COMMA LET ID COLON TYPE\n        \n        let_expression : LET ID COLON TYPE ASSIGN expression IN expression\n                       | nested_lets COMMA LET ID COLON TYPE ASSIGN expression\n        \n        nested_lets : ID COLON TYPE IN expression\n                    | nested_lets COMMA ID COLON TYPE\n        \n        nested_lets : ID COLON TYPE ASSIGN expression IN expression\n                    | nested_lets COMMA ID COLON TYPE ASSIGN expression\n        \n        expression : CASE expression OF actions_list ESAC\n        \n        actions_list : actions_list action\n                     | action\n        \n        action : ID COLON TYPE ARROW expression SEMICOLON\n        \n        expression : NEW TYPE\n        \n        expression : ISVOID expression\n        \n        expression : INT_COMP expression\n        \n        expression : NOT expression\n        \n        empty :\n        '
    
_lr_action_items = {'IN':([40,42,46,48,52,53,59,61,66,80,86,87,94,95,97,99,100,101,102,104,106,114,117,130,134,136,144,145,149,150,155,160,161,162,],[-17,-21,-20,-43,-18,-19,-59,-58,-56,-57,115,-25,-33,-38,-36,-37,-34,-39,-35,-22,-40,131,-32,-52,146,-42,-44,153,-26,-45,-41,-46,-31,-47,]),'DOT':([40,42,45,46,48,52,53,58,59,61,65,66,67,77,79,80,87,89,94,95,96,97,99,100,101,102,104,105,106,110,117,119,120,126,130,133,134,135,136,144,145,147,149,150,154,155,158,159,160,161,162,],[-17,-21,72,-20,-43,-18,-19,72,72,72,72,-56,72,72,72,72,72,72,72,72,121,72,72,72,72,72,-22,72,-40,72,-32,72,72,72,-52,72,72,72,-42,72,72,72,-26,-45,72,-41,72,72,72,-31,72,]),'RPAREN':([22,26,28,40,42,46,48,52,53,55,57,59,61,64,66,79,80,87,88,89,90,91,94,95,97,99,100,101,102,104,106,117,122,130,135,136,139,144,148,149,150,155,156,160,161,162,],[27,32,-15,-17,-21,-20,-43,-18,-19,-14,-16,-59,-58,-60,-56,106,-57,-25,117,-30,-27,-28,-33,-38,-36,-37,-34,-39,-35,-22,-40,-32,-60,-52,-29,-42,149,-44,-60,-26,-45,-41,161,-46,-31,-47,]),'PLUS':([40,42,45,46,48,52,53,58,59,61,65,66,67,77,79,80,87,89,94,95,97,99,100,101,102,104,105,106,110,117,119,120,126,130,133,134,135,136,144,145,147,149,150,154,155,158,159,160,161,162,],[-17,-21,68,-20,-43,-18,-19,68,68,-58,68,-56,68,68,68,-57,68,68,-33,68,-36,68,-34,68,-35,-22,68,-40,68,-32,68,68,68,-52,68,68,68,-42,68,68,68,-26,-45,68,-41,68,68,68,-31,68,]),'ARROW':([143,],[152,]),'LT':([40,42,45,46,48,52,53,58,59,61,65,66,67,77,79,80,87,89,94,95,97,99,100,101,102,104,105,106,110,117,119,120,126,130,133,134,135,136,144,145,147,149,150,154,155,158,159,160,161,162,],[-17,-21,73,-20,-43,-18,-19,73,73,-58,73,-56,73,73,73,-57,73,73,-33,None,-36,None,-34,None,-35,-22,73,-40,73,-32,73,73,73,-52,73,73,73,-42,73,73,73,-26,-45,73,-41,73,73,73,-31,73,]),'TYPE':([3,9,21,34,35,43,54,62,70,85,125,128,140,],[7,11,25,56,57,66,82,86,96,114,141,143,150,]),'THEN':([40,42,46,48,52,53,59,61,66,67,80,87,94,95,97,99,100,101,102,104,106,117,130,136,144,149,150,155,160,161,162,],[-17,-21,-20,-43,-18,-19,-59,-58,-56,93,-57,-25,-33,-38,-36,-37,-34,-39,-35,-22,-40,-32,-52,-42,-44,-26,-45,-41,-46,-31,-47,]),'LBRACE':([7,11,31,36,37,39,41,44,47,49,50,56,63,64,68,69,71,73,74,75,76,78,82,83,92,93,103,109,115,116,118,122,123,131,132,137,146,148,151,152,153,157,],[10,17,47,47,47,47,47,47,47,47,47,83,47,47,47,47,47,47,47,47,47,47,109,47,47,47,-24,47,47,47,47,47,-23,47,47,47,47,47,47,47,47,47,]),'STRING':([31,36,37,39,41,44,47,49,50,63,64,68,69,71,73,74,75,76,78,83,92,93,103,109,115,116,118,122,123,131,132,137,146,148,151,152,153,157,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-24,46,46,46,46,46,-23,46,46,46,46,46,46,46,46,46,]),'LTEQ':([40,42,45,46,48,52,53,58,59,61,65,66,67,77,79,80,87,89,94,95,97,99,100,101,102,104,105,106,110,117,119,120,126,130,133,134,135,136,144,145,147,149,150,154,155,158,159,160,161,162,],[-17,-21,69,-20,-43,-18,-19,69,69,-58,69,-56,69,69,69,-57,69,69,-33,None,-36,None,-34,None,-35,-22,69,-40,69,-32,69,69,69,-52,69,69,69,-42,69,69,69,-26,-45,69,-41,69,69,69,-31,69,]),'CASE':([31,36,37,39,41,44,47,49,50,63,64,68,69,71,73,74,75,76,78,83,92,93,103,109,115,116,118,122,123,131,132,137,146,148,151,152,153,157,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-24,36,36,36,36,36,-23,36,36,36,36,36,36,36,36,36,]),'DIVIDE':([40,42,45,46,48,52,53,58,59,61,65,66,67,77,79,80,87,89,94,95,97,99,100,101,102,104,105,106,110,117,119,120,126,130,133,134,135,136,144,145,147,149,150,154,155,158,159,160,161,162,],[-17,-21,71,-20,-43,-18,-19,71,71,-58,71,-56,71,71,71,-57,71,71,71,71,-36,71,71,71,-35,-22,71,-40,71,-32,71,71,71,-52,71,71,71,-42,71,71,71,-26,-45,71,-41,71,71,71,-31,71,]),'INT_COMP':([31,36,37,39,41,44,47,49,50,63,64,68,69,71,73,74,75,76,78,83,92,93,103,109,115,116,118,122,123,131,132,137,146,148,151,152,153,157,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-24,39,39,39,39,39,-23,39,39,39,39,39,39,39,39,39,]),'LOOP':([40,42,46,48,52,53,59,61,65,66,80,87,94,95,97,99,100,101,102,104,106,117,130,136,144,149,150,155,160,161,162,],[-17,-21,-20,-43,-18,-19,-59,-58,92,-56,-57,-25,-33,-38,-36,-37,-34,-39,-35,-22,-40,-32,-52,-42,-44,-26,-45,-41,-46,-31,-47,]),'AT':([40,42,45,46,48,52,53,58,59,61,65,66,67,77,79,80,87,89,94,95,97,99,100,101,102,104,105,106,110,117,119,120,126,130,133,134,135,136,144,145,147,149,150,154,155,158,159,160,161,162,],[-17,-21,70,-20,-43,-18,-19,70,70,70,70,-56,70,70,70,70,70,70,70,70,70,70,70,70,70,-22,70,-40,70,-32,70,70,70,-52,70,70,70,-42,70,70,70,-26,-45,70,-41,70,70,70,-31,70,]),'LET':([31,36,37,39,41,44,47,49,50,63,64,68,69,71,73,74,75,76,78,81,83,92,93,103,109,115,116,118,122,123,131,132,137,146,148,151,152,153,157,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,107,38,38,38,-24,38,38,38,38,38,-23,38,38,38,38,38,38,38,38,38,]),'NEW':([31,36,37,39,41,44,47,49,50,63,64,68,69,71,73,74,75,76,78,83,92,93,103,109,115,116,118,122,123,131,132,137,146,148,151,152,153,157,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-24,43,43,43,43,43,-23,43,43,43,43,43,43,43,43,43,]),'NOT':([31,36,37,39,41,44,47,49,50,63,64,68,69,71,73,74,75,76,78,83,92,93,103,109,115,116,118,122,123,131,132,137,146,148,151,152,153,157,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-24,37,37,37,37,37,-23,37,37,37,37,37,37,37,37,37,]),'OF':([40,42,46,48,52,53,58,59,61,66,80,87,94,95,97,99,100,101,102,104,106,117,130,136,144,149,150,155,160,161,162,],[-17,-21,-20,-43,-18,-19,84,-59,-58,-56,-57,-25,-33,-38,-36,-37,-34,-39,-35,-22,-40,-32,-52,-42,-44,-26,-45,-41,-46,-31,-47,]),'ID':([10,12,17,19,22,24,31,33,36,37,38,39,41,44,47,49,50,63,64,68,69,71,72,73,74,75,76,78,81,83,84,92,93,103,107,109,112,113,115,116,118,121,122,123,129,131,132,137,146,148,151,152,153,157,163,],[15,15,15,-9,29,-8,40,29,40,40,60,40,40,40,40,40,40,40,40,40,40,40,98,40,40,40,40,40,108,40,111,40,40,-24,124,40,-54,111,40,40,40,138,40,-23,-53,40,40,40,40,40,40,40,40,40,-55,]),'CLASS':([0,1,6,8,],[3,3,-3,-2,]),'COMMA':([26,28,40,42,46,48,51,52,53,55,57,59,61,66,80,87,89,90,94,95,97,99,100,101,102,104,106,117,130,133,135,136,141,144,149,150,154,155,158,160,161,162,],[33,-15,-17,-21,-20,-43,81,-18,-19,-14,-16,-59,-58,-56,-57,-25,-30,118,-33,-38,-36,-37,-34,-39,-35,-22,-40,-32,-52,-48,-29,-42,-49,-44,-26,-45,-50,-41,-51,-46,-31,-47,]),'MULTIPLY':([40,42,45,46,48,52,53,58,59,61,65,66,67,77,79,80,87,89,94,95,97,99,100,101,102,104,105,106,110,117,119,120,126,130,133,134,135,136,144,145,147,149,150,154,155,158,159,160,161,162,],[-17,-21,76,-20,-43,-18,-19,76,76,-58,76,-56,76,76,76,-57,76,76,76,76,-36,76,76,76,-35,-22,76,-40,76,-32,76,76,76,-52,76,76,76,-42,76,76,76,-26,-45,76,-41,76,76,76,-31,76,]),'FI':([40,42,46,48,52,53,59,61,66,80,87,94,95,97,99,100,101,102,104,106,117,130,136,144,147,149,150,155,160,161,162,],[-17,-21,-20,-43,-18,-19,-59,-58,-56,-57,-25,-33,-38,-36,-37,-34,-39,-35,-22,-40,-32,-52,-42,-44,155,-26,-45,-41,-46,-31,-47,]),'ISVOID':([31,36,37,39,41,44,47,49,50,63,64,68,69,71,73,74,75,76,78,83,92,93,103,109,115,116,118,122,123,131,132,137,146,148,151,152,153,157,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-24,50,50,50,50,50,-23,50,50,50,50,50,50,50,50,50,]),'ASSIGN':([25,40,86,114,141,150,],[31,63,116,132,151,157,]),'ELSE':([40,42,46,48,52,53,59,61,66,80,87,94,95,97,99,100,101,102,104,106,117,120,130,136,144,149,150,155,160,161,162,],[-17,-21,-20,-43,-18,-19,-59,-58,-56,-57,-25,-33,-38,-36,-37,-34,-39,-35,-22,-40,-32,137,-52,-42,-44,-26,-45,-41,-46,-31,-47,]),'SEMICOLON':([2,5,13,18,20,25,30,40,42,45,46,48,52,53,59,61,66,77,80,87,94,95,97,99,100,101,102,104,105,106,117,127,130,136,142,144,149,150,155,159,160,161,162,],[6,8,19,24,-4,-13,-5,-17,-21,-12,-20,-43,-18,-19,-59,-58,-56,103,-57,-25,-33,-38,-36,-37,-34,-39,-35,-22,123,-40,-32,-11,-52,-42,-10,-44,-26,-45,-41,163,-46,-31,-47,]),'POOL':([40,42,46,48,52,53,59,61,66,80,87,94,95,97,99,100,101,102,104,106,117,119,130,136,144,149,150,155,160,161,162,],[-17,-21,-20,-43,-18,-19,-59,-58,-56,-57,-25,-33,-38,-36,-37,-34,-39,-35,-22,-40,-32,136,-52,-42,-44,-26,-45,-41,-46,-31,-47,]),'ESAC':([112,113,129,163,],[-54,130,-53,-55,]),'WHILE':([31,36,37,39,41,44,47,49,50,63,64,68,69,71,73,74,75,76,78,83,92,93,103,109,115,116,118,122,123,131,132,137,146,148,151,152,153,157,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-24,41,41,41,41,41,-23,41,41,41,41,41,41,41,41,41,]),'$end':([1,4,6,8,],[-1,0,-3,-2,]),'INTEGER':([31,36,37,39,41,44,47,49,50,63,64,68,69,71,73,74,75,76,78,83,92,93,103,109,115,116,118,122,123,131,132,137,146,148,151,152,153,157,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-24,52,52,52,52,52,-23,52,52,52,52,52,52,52,52,52,]),'COLON':([15,27,29,32,40,60,108,111,124,],[21,34,35,54,62,85,125,128,140,]),'MINUS':([40,42,45,46,48,52,53,58,59,61,65,66,67,77,79,80,87,89,94,95,97,99,100,101,102,104,105,106,110,117,119,120,126,130,133,134,135,136,144,145,147,149,150,154,155,158,159,160,161,162,],[-17,-21,74,-20,-43,-18,-19,74,74,-58,74,-56,74,74,74,-57,74,74,-33,74,-36,74,-34,74,-35,-22,74,-40,74,-32,74,74,74,-52,74,74,74,-42,74,74,74,-26,-45,74,-41,74,74,74,-31,74,]),'RBRACE':([10,12,14,16,17,19,23,24,40,42,46,48,52,53,59,61,66,78,80,87,94,95,97,99,100,101,102,103,104,106,110,117,123,126,130,136,144,149,150,155,160,161,162,],[-60,-6,20,-7,-60,-9,30,-8,-17,-21,-20,-43,-18,-19,-59,-58,-56,104,-57,-25,-33,-38,-36,-37,-34,-39,-35,-24,-22,-40,127,-32,-23,142,-52,-42,-44,-26,-45,-41,-46,-31,-47,]),'SELF':([31,36,37,39,41,44,47,49,50,63,64,68,69,71,73,74,75,76,78,83,92,93,103,109,115,116,118,122,123,131,132,137,146,148,151,152,153,157,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-24,42,42,42,42,42,-23,42,42,42,42,42,42,42,42,42,]),'LPAREN':([15,31,36,37,39,40,41,44,47,49,50,63,64,68,69,71,73,74,75,76,78,83,92,93,98,103,109,115,116,118,122,123,131,132,137,138,146,148,151,152,153,157,],[22,49,49,49,49,64,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,122,-24,49,49,49,49,49,-23,49,49,49,148,49,49,49,49,49,49,]),'IF':([31,36,37,39,41,44,47,49,50,63,64,68,69,71,73,74,75,76,78,83,92,93,103,109,115,116,118,122,123,131,132,137,146,148,151,152,153,157,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-24,44,44,44,44,44,-23,44,44,44,44,44,44,44,44,44,]),'INHERITS':([7,],[9,]),'BOOLEAN':([31,36,37,39,41,44,47,49,50,63,64,68,69,71,73,74,75,76,78,83,92,93,103,109,115,116,118,122,123,131,132,137,146,148,151,152,153,157,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-24,53,53,53,53,53,-23,53,53,53,53,53,53,53,53,53,]),'EQ':([40,42,45,46,48,52,53,58,59,61,65,66,67,77,79,80,87,89,94,95,97,99,100,101,102,104,105,106,110,117,119,120,126,130,133,134,135,136,144,145,147,149,150,154,155,158,159,160,161,162,],[-17,-21,75,-20,-43,-18,-19,75,75,-58,75,-56,75,75,75,-57,75,75,-33,None,-36,None,-34,None,-35,-22,75,-40,75,-32,75,75,75,-52,75,75,75,-42,75,75,75,-26,-45,75,-41,75,75,75,-31,75,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'features_list':([10,17,],[12,12,]),'expression':([31,36,37,39,41,44,47,49,50,63,64,68,69,71,73,74,75,76,78,83,92,93,109,115,116,118,122,131,132,137,146,148,151,152,153,157,],[45,58,59,61,65,67,77,79,80,87,89,94,95,97,99,100,101,102,105,110,119,120,126,133,134,135,89,144,145,147,154,89,158,159,160,162,]),'nested_lets':([31,36,37,39,41,44,47,49,50,63,64,68,69,71,73,74,75,76,78,83,92,93,109,115,116,118,122,131,132,137,146,148,151,152,153,157,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'arguments_list_opt':([64,122,148,],[88,139,156,]),'block_list':([47,],[78,]),'arguments_list':([64,122,148,],[90,90,90,]),'actions_list':([84,],[113,]),'let_expression':([31,36,37,39,41,44,47,49,50,63,64,68,69,71,73,74,75,76,78,83,92,93,109,115,116,118,122,131,132,137,146,148,151,152,153,157,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'formal_params_list':([22,],[26,]),'action':([84,113,],[112,129,]),'class_list':([0,],[1,]),'class':([0,1,],[2,5,]),'feature':([10,12,17,],[13,18,13,]),'formal_param':([22,33,],[28,55,]),'features_list_opt':([10,17,],[14,23,]),'program':([0,],[4,]),'empty':([10,17,64,122,148,],[16,16,91,91,91,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class_list','program',1,'p_program','parser.py',100),
  ('class_list -> class_list class SEMICOLON','class_list',3,'p_class_list','parser.py',107),
  ('class_list -> class SEMICOLON','class_list',2,'p_class_list','parser.py',108),
  ('class -> CLASS TYPE LBRACE features_list_opt RBRACE','class',5,'p_class','parser.py',117),
  ('class -> CLASS TYPE INHERITS TYPE LBRACE features_list_opt RBRACE','class',7,'p_class_inherits','parser.py',123),
  ('features_list_opt -> features_list','features_list_opt',1,'p_feature_list_opt','parser.py',129),
  ('features_list_opt -> empty','features_list_opt',1,'p_feature_list_opt','parser.py',130),
  ('features_list -> features_list feature SEMICOLON','features_list',3,'p_feature_list','parser.py',136),
  ('features_list -> feature SEMICOLON','features_list',2,'p_feature_list','parser.py',137),
  ('feature -> ID LPAREN formal_params_list RPAREN COLON TYPE LBRACE expression RBRACE','feature',9,'p_feature_method','parser.py',146),
  ('feature -> ID LPAREN RPAREN COLON TYPE LBRACE expression RBRACE','feature',8,'p_feature_method_no_formals','parser.py',152),
  ('feature -> ID COLON TYPE ASSIGN expression','feature',5,'p_feature_attr_initialized','parser.py',158),
  ('feature -> ID COLON TYPE','feature',3,'p_feature_attr','parser.py',164),
  ('formal_params_list -> formal_params_list COMMA formal_param','formal_params_list',3,'p_formal_list_many','parser.py',170),
  ('formal_params_list -> formal_param','formal_params_list',1,'p_formal_list_many','parser.py',171),
  ('formal_param -> ID COLON TYPE','formal_param',3,'p_formal','parser.py',180),
  ('expression -> ID','expression',1,'p_expression_object_identifier','parser.py',186),
  ('expression -> INTEGER','expression',1,'p_expression_integer_constant','parser.py',192),
  ('expression -> BOOLEAN','expression',1,'p_expression_boolean_constant','parser.py',198),
  ('expression -> STRING','expression',1,'p_expression_string_constant','parser.py',204),
  ('expression -> SELF','expression',1,'p_expr_self','parser.py',210),
  ('expression -> LBRACE block_list RBRACE','expression',3,'p_expression_block','parser.py',216),
  ('block_list -> block_list expression SEMICOLON','block_list',3,'p_block_list','parser.py',222),
  ('block_list -> expression SEMICOLON','block_list',2,'p_block_list','parser.py',223),
  ('expression -> ID ASSIGN expression','expression',3,'p_expression_assignment','parser.py',232),
  ('expression -> expression DOT ID LPAREN arguments_list_opt RPAREN','expression',6,'p_expression_dispatch','parser.py',240),
  ('arguments_list_opt -> arguments_list','arguments_list_opt',1,'p_arguments_list_opt','parser.py',246),
  ('arguments_list_opt -> empty','arguments_list_opt',1,'p_arguments_list_opt','parser.py',247),
  ('arguments_list -> arguments_list COMMA expression','arguments_list',3,'p_arguments_list','parser.py',253),
  ('arguments_list -> expression','arguments_list',1,'p_arguments_list','parser.py',254),
  ('expression -> expression AT TYPE DOT ID LPAREN arguments_list_opt RPAREN','expression',8,'p_expression_static_dispatch','parser.py',263),
  ('expression -> ID LPAREN arguments_list_opt RPAREN','expression',4,'p_expression_self_dispatch','parser.py',269),
  ('expression -> expression PLUS expression','expression',3,'p_expression_math_operations','parser.py',277),
  ('expression -> expression MINUS expression','expression',3,'p_expression_math_operations','parser.py',278),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_math_operations','parser.py',279),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_math_operations','parser.py',280),
  ('expression -> expression LT expression','expression',3,'p_expression_math_comparisons','parser.py',293),
  ('expression -> expression LTEQ expression','expression',3,'p_expression_math_comparisons','parser.py',294),
  ('expression -> expression EQ expression','expression',3,'p_expression_math_comparisons','parser.py',295),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_with_parenthesis','parser.py',306),
  ('expression -> IF expression THEN expression ELSE expression FI','expression',7,'p_expression_if_conditional','parser.py',314),
  ('expression -> WHILE expression LOOP expression POOL','expression',5,'p_expression_while_loop','parser.py',320),
  ('expression -> let_expression','expression',1,'p_expression_let','parser.py',328),
  ('let_expression -> LET ID COLON TYPE IN expression','let_expression',6,'p_expression_let_simple','parser.py',334),
  ('let_expression -> nested_lets COMMA LET ID COLON TYPE','let_expression',6,'p_expression_let_simple','parser.py',335),
  ('let_expression -> LET ID COLON TYPE ASSIGN expression IN expression','let_expression',8,'p_expression_let_initialized','parser.py',341),
  ('let_expression -> nested_lets COMMA LET ID COLON TYPE ASSIGN expression','let_expression',8,'p_expression_let_initialized','parser.py',342),
  ('nested_lets -> ID COLON TYPE IN expression','nested_lets',5,'p_inner_lets_simple','parser.py',348),
  ('nested_lets -> nested_lets COMMA ID COLON TYPE','nested_lets',5,'p_inner_lets_simple','parser.py',349),
  ('nested_lets -> ID COLON TYPE ASSIGN expression IN expression','nested_lets',7,'p_inner_lets_initialized','parser.py',355),
  ('nested_lets -> nested_lets COMMA ID COLON TYPE ASSIGN expression','nested_lets',7,'p_inner_lets_initialized','parser.py',356),
  ('expression -> CASE expression OF actions_list ESAC','expression',5,'p_expression_case','parser.py',364),
  ('actions_list -> actions_list action','actions_list',2,'p_actions_list','parser.py',370),
  ('actions_list -> action','actions_list',1,'p_actions_list','parser.py',371),
  ('action -> ID COLON TYPE ARROW expression SEMICOLON','action',6,'p_action_expr','parser.py',380),
  ('expression -> NEW TYPE','expression',2,'p_expression_new','parser.py',388),
  ('expression -> ISVOID expression','expression',2,'p_expression_isvoid','parser.py',394),
  ('expression -> INT_COMP expression','expression',2,'p_expression_integer_complement','parser.py',400),
  ('expression -> NOT expression','expression',2,'p_expression_boolean_complement','parser.py',406),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',414),
]
