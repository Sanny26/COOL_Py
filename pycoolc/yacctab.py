
# yacctab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNrightNOTnonassocLTEQLTEQleftPLUSMINUSleftMULTIPLYDIVIDErightISVOIDrightINT_COMPleftATleftDOTID TYPE INTEGER STRING BOOLEAN LPAREN RPAREN LBRACE RBRACE COLON COMMA DOT SEMICOLON AT PLUS MINUS MULTIPLY DIVIDE EQ LT LTEQ ASSIGN INT_COMP NOT ARROW NEW LOOP POOL ESAC IN ELSE WHILE ISVOID IF LET CLASS INHERITS FI SELF THEN OF CASE\n        program : class_list\n        \n        class_list : class_list class SEMICOLON\n                   | class SEMICOLON\n        \n        class : CLASS TYPE LBRACE features_list_opt RBRACE\n        \n        class : CLASS TYPE INHERITS TYPE LBRACE features_list_opt RBRACE\n        \n        features_list_opt : features_list\n                          | empty\n        \n        features_list : features_list feature SEMICOLON\n                      | feature SEMICOLON\n        \n        feature : ID LPAREN formal_params_list RPAREN COLON TYPE LBRACE expression RBRACE\n        \n        feature : ID LPAREN RPAREN COLON TYPE LBRACE expression RBRACE\n        \n        feature : ID COLON TYPE ASSIGN expression\n        \n        feature : ID COLON TYPE\n        \n        formal_params_list  : formal_params_list COMMA formal_param\n                            | formal_param\n        \n        formal_param : ID COLON TYPE\n        \n        expression : ID\n        \n        expression : INTEGER\n        \n        expression : BOOLEAN\n        \n        expression : STRING\n        \n        expression  : SELF\n        \n        expression : LBRACE block_list RBRACE\n        \n        block_list : block_list expression SEMICOLON\n                   | expression SEMICOLON\n        \n        expression : ID ASSIGN expression\n        \n        expression : expression DOT ID LPAREN arguments_list_opt RPAREN\n        \n        arguments_list_opt : arguments_list\n                           | empty\n        \n        arguments_list : arguments_list COMMA expression\n                       | expression\n        \n        expression : expression AT TYPE DOT ID LPAREN arguments_list_opt RPAREN\n        \n        expression : ID LPAREN arguments_list_opt RPAREN\n        \n        expression : expression PLUS expression\n                   | expression MINUS expression\n                   | expression MULTIPLY expression\n                   | expression DIVIDE expression\n        \n        expression : expression LT expression\n                   | expression LTEQ expression\n                   | expression EQ expression\n        \n        expression : LPAREN expression RPAREN\n        \n        expression : IF expression THEN expression ELSE expression FI\n        \n        expression : WHILE expression LOOP expression POOL\n        \n         expression : let_expression\n        \n        let_expression : LET ID COLON TYPE IN expression\n                       | nested_lets COMMA LET ID COLON TYPE\n        \n        let_expression : LET ID COLON TYPE ASSIGN expression IN expression\n                       | nested_lets COMMA LET ID COLON TYPE ASSIGN expression\n        \n        nested_lets : ID COLON TYPE IN expression\n                    | nested_lets COMMA ID COLON TYPE\n        \n        nested_lets : ID COLON TYPE ASSIGN expression IN expression\n                    | nested_lets COMMA ID COLON TYPE ASSIGN expression\n        \n        expression : CASE expression OF actions_list ESAC\n        \n        actions_list : actions_list action\n                     | action\n        \n        action : ID COLON TYPE ARROW expression SEMICOLON\n        \n        expression : NEW TYPE\n        \n        expression : ISVOID expression\n        \n        expression : INT_COMP expression\n        \n        expression : NOT expression\n        \n        empty :\n        '
    
_lr_action_items = {'NOT':([31,38,39,45,46,47,49,51,52,61,62,66,68,69,70,72,73,74,76,83,84,92,93,109,112,113,114,117,118,132,135,136,143,146,150,155,156,158,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-24,49,49,49,49,-23,49,49,49,49,49,49,49,49,49,49,]),'POOL':([36,37,40,41,43,44,63,67,77,79,85,87,95,96,97,98,100,101,102,104,111,115,128,138,145,147,151,153,159,160,162,],[-21,-20,-19,-17,-18,-43,-56,-58,-59,-57,-40,-25,-22,-37,-39,-38,-36,-35,-33,-34,128,-32,-42,-52,-26,-44,-45,-41,-31,-46,-47,]),'THEN':([36,37,40,41,43,44,63,64,67,77,79,85,87,95,96,97,98,100,101,102,104,115,128,138,145,147,151,153,159,160,162,],[-21,-20,-19,-17,-18,-43,-56,92,-58,-59,-57,-40,-25,-22,-37,-39,-38,-36,-35,-33,-34,-32,-42,-52,-26,-44,-45,-41,-31,-46,-47,]),'SELF':([31,38,39,45,46,47,49,51,52,61,62,66,68,69,70,72,73,74,76,83,84,92,93,109,112,113,114,117,118,132,135,136,143,146,150,155,156,158,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-24,36,36,36,36,-23,36,36,36,36,36,36,36,36,36,36,]),'LET':([31,38,39,45,46,47,49,51,52,61,62,66,68,69,70,72,73,74,76,81,83,84,92,93,109,112,113,114,117,118,132,135,136,143,146,150,155,156,158,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,108,50,50,50,-24,50,50,50,50,-23,50,50,50,50,50,50,50,50,50,50,]),'STRING':([31,38,39,45,46,47,49,51,52,61,62,66,68,69,70,72,73,74,76,83,84,92,93,109,112,113,114,117,118,132,135,136,143,146,150,155,156,158,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-24,37,37,37,37,-23,37,37,37,37,37,37,37,37,37,37,]),'ESAC':([121,123,137,163,],[138,-54,-53,-55,]),'ISVOID':([31,38,39,45,46,47,49,51,52,61,62,66,68,69,70,72,73,74,76,83,84,92,93,109,112,113,114,117,118,132,135,136,143,146,150,155,156,158,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-24,51,51,51,51,-23,51,51,51,51,51,51,51,51,51,51,]),'WHILE':([31,38,39,45,46,47,49,51,52,61,62,66,68,69,70,72,73,74,76,83,84,92,93,109,112,113,114,117,118,132,135,136,143,146,150,155,156,158,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-24,38,38,38,38,-23,38,38,38,38,38,38,38,38,38,38,]),'ELSE':([36,37,40,41,43,44,63,67,77,79,85,87,95,96,97,98,100,101,102,104,115,116,128,138,145,147,151,153,159,160,162,],[-21,-20,-19,-17,-18,-43,-56,-58,-59,-57,-40,-25,-22,-37,-39,-38,-36,-35,-33,-34,-32,132,-42,-52,-26,-44,-45,-41,-31,-46,-47,]),'RBRACE':([9,14,15,16,17,20,23,29,36,37,40,41,43,44,63,66,67,77,79,85,87,93,95,96,97,98,100,101,102,104,110,115,117,126,128,138,145,147,151,153,159,160,162,],[-60,-6,22,-7,-60,-9,30,-8,-21,-20,-19,-17,-18,-43,-56,95,-58,-59,-57,-40,-25,-24,-22,-37,-39,-38,-36,-35,-33,-34,127,-32,-23,142,-42,-52,-26,-44,-45,-41,-31,-46,-47,]),'COMMA':([26,27,36,37,40,41,43,44,53,54,55,63,67,77,79,85,87,88,90,95,96,97,98,100,101,102,104,115,128,129,131,138,140,145,147,151,152,153,157,159,160,162,],[33,-15,-21,-20,-19,-17,-18,-43,81,-16,-14,-56,-58,-59,-57,-40,-25,114,-30,-22,-37,-39,-38,-36,-35,-33,-34,-32,-42,-48,-29,-52,-49,-26,-44,-45,-50,-41,-51,-31,-46,-47,]),'DIVIDE':([36,37,40,41,43,44,48,58,59,63,64,65,67,77,79,80,85,87,90,94,95,96,97,98,100,101,102,104,110,111,115,116,126,128,129,130,131,138,144,145,147,148,151,152,153,157,159,160,161,162,],[-21,-20,-19,-17,-18,-43,72,72,72,-56,72,72,-58,72,-57,72,-40,72,72,72,-22,72,72,72,-36,-35,72,72,72,72,-32,72,72,-42,72,72,72,-52,72,-26,72,72,-45,72,-41,72,-31,72,72,72,]),'LPAREN':([12,31,38,39,41,45,46,47,49,51,52,61,62,66,68,69,70,72,73,74,76,83,84,92,93,99,109,112,113,114,117,118,132,134,135,136,143,146,150,155,156,158,],[19,39,39,39,62,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-24,118,39,39,39,39,-23,39,39,146,39,39,39,39,39,39,39,39,]),'DOT':([36,37,40,41,43,44,48,58,59,63,64,65,67,77,79,80,85,87,90,94,95,96,97,98,100,101,102,103,104,110,111,115,116,126,128,129,130,131,138,144,145,147,148,151,152,153,157,159,160,161,162,],[-21,-20,-19,-17,-18,-43,71,71,71,-56,71,71,71,71,71,71,-40,71,71,71,-22,71,71,71,71,71,71,119,71,71,71,-32,71,71,-42,71,71,71,-52,71,-26,71,71,-45,71,-41,71,-31,71,71,71,]),'LT':([36,37,40,41,43,44,48,58,59,63,64,65,67,77,79,80,85,87,90,94,95,96,97,98,100,101,102,104,110,111,115,116,126,128,129,130,131,138,144,145,147,148,151,152,153,157,159,160,161,162,],[-21,-20,-19,-17,-18,-43,68,68,68,-56,68,68,-58,68,-57,68,-40,68,68,68,-22,None,None,None,-36,-35,-33,-34,68,68,-32,68,68,-42,68,68,68,-52,68,-26,68,68,-45,68,-41,68,-31,68,68,68,]),'NEW':([31,38,39,45,46,47,49,51,52,61,62,66,68,69,70,72,73,74,76,83,84,92,93,109,112,113,114,117,118,132,135,136,143,146,150,155,156,158,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-24,42,42,42,42,-23,42,42,42,42,42,42,42,42,42,42,]),'CASE':([31,38,39,45,46,47,49,51,52,61,62,66,68,69,70,72,73,74,76,83,84,92,93,109,112,113,114,117,118,132,135,136,143,146,150,155,156,158,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-24,52,52,52,52,-23,52,52,52,52,52,52,52,52,52,52,]),'SEMICOLON':([1,7,13,21,22,24,30,36,37,40,41,43,44,48,63,65,67,77,79,85,87,94,95,96,97,98,100,101,102,104,115,127,128,138,142,145,147,151,153,159,160,161,162,],[5,10,20,29,-4,-13,-5,-21,-20,-19,-17,-18,-43,-12,-56,93,-58,-59,-57,-40,-25,117,-22,-37,-39,-38,-36,-35,-33,-34,-32,-11,-42,-52,-10,-26,-44,-45,-41,-31,-46,163,-47,]),'INHERITS':([6,],[8,]),'BOOLEAN':([31,38,39,45,46,47,49,51,52,61,62,66,68,69,70,72,73,74,76,83,84,92,93,109,112,113,114,117,118,132,135,136,143,146,150,155,156,158,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-24,40,40,40,40,-23,40,40,40,40,40,40,40,40,40,40,]),'ID':([9,14,17,19,20,29,31,33,38,39,45,46,47,49,50,51,52,61,62,66,68,69,70,71,72,73,74,76,81,83,84,92,93,106,108,109,112,113,114,117,118,119,121,123,132,135,136,137,143,146,150,155,156,158,163,],[12,12,12,25,-9,-8,41,25,41,41,41,41,41,41,78,41,41,41,41,41,41,41,41,99,41,41,41,41,107,41,41,41,-24,122,125,41,41,41,41,-23,41,134,122,-54,41,41,41,-53,41,41,41,41,41,41,-55,]),'CLASS':([0,4,5,10,],[2,2,-3,-2,]),'IN':([36,37,40,41,43,44,63,67,77,79,85,86,87,95,96,97,98,100,101,102,104,115,120,128,130,138,145,147,148,151,153,159,160,162,],[-21,-20,-19,-17,-18,-43,-56,-58,-59,-57,-40,112,-25,-22,-37,-39,-38,-36,-35,-33,-34,-32,135,-42,143,-52,-26,-44,155,-45,-41,-31,-46,-47,]),'INTEGER':([31,38,39,45,46,47,49,51,52,61,62,66,68,69,70,72,73,74,76,83,84,92,93,109,112,113,114,117,118,132,135,136,143,146,150,155,156,158,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-24,43,43,43,43,-23,43,43,43,43,43,43,43,43,43,43,]),'EQ':([36,37,40,41,43,44,48,58,59,63,64,65,67,77,79,80,85,87,90,94,95,96,97,98,100,101,102,104,110,111,115,116,126,128,129,130,131,138,144,145,147,148,151,152,153,157,159,160,161,162,],[-21,-20,-19,-17,-18,-43,69,69,69,-56,69,69,-58,69,-57,69,-40,69,69,69,-22,None,None,None,-36,-35,-33,-34,69,69,-32,69,69,-42,69,69,69,-52,69,-26,69,69,-45,69,-41,69,-31,69,69,69,]),'COLON':([12,25,28,34,41,78,107,122,125,],[18,32,35,56,60,105,124,139,141,]),'ARROW':([149,],[156,]),'FI':([36,37,40,41,43,44,63,67,77,79,85,87,95,96,97,98,100,101,102,104,115,128,138,144,145,147,151,153,159,160,162,],[-21,-20,-19,-17,-18,-43,-56,-58,-59,-57,-40,-25,-22,-37,-39,-38,-36,-35,-33,-34,-32,-42,-52,153,-26,-44,-45,-41,-31,-46,-47,]),'LTEQ':([36,37,40,41,43,44,48,58,59,63,64,65,67,77,79,80,85,87,90,94,95,96,97,98,100,101,102,104,110,111,115,116,126,128,129,130,131,138,144,145,147,148,151,152,153,157,159,160,161,162,],[-21,-20,-19,-17,-18,-43,70,70,70,-56,70,70,-58,70,-57,70,-40,70,70,70,-22,None,None,None,-36,-35,-33,-34,70,70,-32,70,70,-42,70,70,70,-52,70,-26,70,70,-45,70,-41,70,-31,70,70,70,]),'RPAREN':([19,26,27,36,37,40,41,43,44,54,55,59,62,63,67,77,79,85,87,88,89,90,91,95,96,97,98,100,101,102,104,115,118,128,131,133,138,145,146,147,151,153,154,159,160,162,],[28,34,-15,-21,-20,-19,-17,-18,-43,-16,-14,85,-60,-56,-58,-59,-57,-40,-25,-27,-28,-30,115,-22,-37,-39,-38,-36,-35,-33,-34,-32,-60,-42,-29,145,-52,-26,-60,-44,-45,-41,159,-31,-46,-47,]),'IF':([31,38,39,45,46,47,49,51,52,61,62,66,68,69,70,72,73,74,76,83,84,92,93,109,112,113,114,117,118,132,135,136,143,146,150,155,156,158,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-24,45,45,45,45,-23,45,45,45,45,45,45,45,45,45,45,]),'$end':([3,4,5,10,],[0,-1,-3,-2,]),'OF':([36,37,40,41,43,44,63,67,77,79,80,85,87,95,96,97,98,100,101,102,104,115,128,138,145,147,151,153,159,160,162,],[-21,-20,-19,-17,-18,-43,-56,-58,-59,-57,106,-40,-25,-22,-37,-39,-38,-36,-35,-33,-34,-32,-42,-52,-26,-44,-45,-41,-31,-46,-47,]),'MULTIPLY':([36,37,40,41,43,44,48,58,59,63,64,65,67,77,79,80,85,87,90,94,95,96,97,98,100,101,102,104,110,111,115,116,126,128,129,130,131,138,144,145,147,148,151,152,153,157,159,160,161,162,],[-21,-20,-19,-17,-18,-43,73,73,73,-56,73,73,-58,73,-57,73,-40,73,73,73,-22,73,73,73,-36,-35,73,73,73,73,-32,73,73,-42,73,73,73,-52,73,-26,73,73,-45,73,-41,73,-31,73,73,73,]),'LBRACE':([6,11,31,38,39,45,46,47,49,51,52,57,61,62,66,68,69,70,72,73,74,76,82,83,84,92,93,109,112,113,114,117,118,132,135,136,143,146,150,155,156,158,],[9,17,46,46,46,46,46,46,46,46,46,83,46,46,46,46,46,46,46,46,46,46,109,46,46,46,-24,46,46,46,46,-23,46,46,46,46,46,46,46,46,46,46,]),'MINUS':([36,37,40,41,43,44,48,58,59,63,64,65,67,77,79,80,85,87,90,94,95,96,97,98,100,101,102,104,110,111,115,116,126,128,129,130,131,138,144,145,147,148,151,152,153,157,159,160,161,162,],[-21,-20,-19,-17,-18,-43,76,76,76,-56,76,76,-58,76,-57,76,-40,76,76,76,-22,76,76,76,-36,-35,-33,-34,76,76,-32,76,76,-42,76,76,76,-52,76,-26,76,76,-45,76,-41,76,-31,76,76,76,]),'TYPE':([2,8,18,32,35,42,56,60,75,105,124,139,141,],[6,11,24,54,57,63,82,86,103,120,140,149,151,]),'LOOP':([36,37,40,41,43,44,58,63,67,77,79,85,87,95,96,97,98,100,101,102,104,115,128,138,145,147,151,153,159,160,162,],[-21,-20,-19,-17,-18,-43,84,-56,-58,-59,-57,-40,-25,-22,-37,-39,-38,-36,-35,-33,-34,-32,-42,-52,-26,-44,-45,-41,-31,-46,-47,]),'ASSIGN':([24,41,86,120,140,151,],[31,61,113,136,150,158,]),'AT':([36,37,40,41,43,44,48,58,59,63,64,65,67,77,79,80,85,87,90,94,95,96,97,98,100,101,102,104,110,111,115,116,126,128,129,130,131,138,144,145,147,148,151,152,153,157,159,160,161,162,],[-21,-20,-19,-17,-18,-43,75,75,75,-56,75,75,75,75,75,75,-40,75,75,75,-22,75,75,75,75,75,75,75,75,75,-32,75,75,-42,75,75,75,-52,75,-26,75,75,-45,75,-41,75,-31,75,75,75,]),'INT_COMP':([31,38,39,45,46,47,49,51,52,61,62,66,68,69,70,72,73,74,76,83,84,92,93,109,112,113,114,117,118,132,135,136,143,146,150,155,156,158,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-24,47,47,47,47,-23,47,47,47,47,47,47,47,47,47,47,]),'PLUS':([36,37,40,41,43,44,48,58,59,63,64,65,67,77,79,80,85,87,90,94,95,96,97,98,100,101,102,104,110,111,115,116,126,128,129,130,131,138,144,145,147,148,151,152,153,157,159,160,161,162,],[-21,-20,-19,-17,-18,-43,74,74,74,-56,74,74,-58,74,-57,74,-40,74,74,74,-22,74,74,74,-36,-35,-33,-34,74,74,-32,74,74,-42,74,74,74,-52,74,-26,74,74,-45,74,-41,74,-31,74,74,74,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'action':([106,121,],[123,137,]),'expression':([31,38,39,45,46,47,49,51,52,61,62,66,68,69,70,72,73,74,76,83,84,92,109,112,113,114,118,132,135,136,143,146,150,155,156,158,],[48,58,59,64,65,67,77,79,80,87,90,94,96,97,98,100,101,102,104,110,111,116,126,129,130,131,90,144,147,148,152,90,157,160,161,162,]),'arguments_list_opt':([62,118,146,],[91,133,154,]),'formal_params_list':([19,],[26,]),'program':([0,],[3,]),'feature':([9,14,17,],[13,21,13,]),'let_expression':([31,38,39,45,46,47,49,51,52,61,62,66,68,69,70,72,73,74,76,83,84,92,109,112,113,114,118,132,135,136,143,146,150,155,156,158,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'features_list':([9,17,],[14,14,]),'features_list_opt':([9,17,],[15,23,]),'class':([0,4,],[1,7,]),'actions_list':([106,],[121,]),'arguments_list':([62,118,146,],[88,88,88,]),'block_list':([46,],[66,]),'formal_param':([19,33,],[27,55,]),'empty':([9,17,62,118,146,],[16,16,89,89,89,]),'nested_lets':([31,38,39,45,46,47,49,51,52,61,62,66,68,69,70,72,73,74,76,83,84,92,109,112,113,114,118,132,135,136,143,146,150,155,156,158,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'class_list':([0,],[4,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class_list','program',1,'p_program','parser.py',100),
  ('class_list -> class_list class SEMICOLON','class_list',3,'p_class_list','parser.py',107),
  ('class_list -> class SEMICOLON','class_list',2,'p_class_list','parser.py',108),
  ('class -> CLASS TYPE LBRACE features_list_opt RBRACE','class',5,'p_class','parser.py',117),
  ('class -> CLASS TYPE INHERITS TYPE LBRACE features_list_opt RBRACE','class',7,'p_class_inherits','parser.py',123),
  ('features_list_opt -> features_list','features_list_opt',1,'p_feature_list_opt','parser.py',129),
  ('features_list_opt -> empty','features_list_opt',1,'p_feature_list_opt','parser.py',130),
  ('features_list -> features_list feature SEMICOLON','features_list',3,'p_feature_list','parser.py',136),
  ('features_list -> feature SEMICOLON','features_list',2,'p_feature_list','parser.py',137),
  ('feature -> ID LPAREN formal_params_list RPAREN COLON TYPE LBRACE expression RBRACE','feature',9,'p_feature_method','parser.py',146),
  ('feature -> ID LPAREN RPAREN COLON TYPE LBRACE expression RBRACE','feature',8,'p_feature_method_no_formals','parser.py',152),
  ('feature -> ID COLON TYPE ASSIGN expression','feature',5,'p_feature_attr_initialized','parser.py',158),
  ('feature -> ID COLON TYPE','feature',3,'p_feature_attr','parser.py',164),
  ('formal_params_list -> formal_params_list COMMA formal_param','formal_params_list',3,'p_formal_list_many','parser.py',170),
  ('formal_params_list -> formal_param','formal_params_list',1,'p_formal_list_many','parser.py',171),
  ('formal_param -> ID COLON TYPE','formal_param',3,'p_formal','parser.py',180),
  ('expression -> ID','expression',1,'p_expression_object_identifier','parser.py',186),
  ('expression -> INTEGER','expression',1,'p_expression_integer_constant','parser.py',192),
  ('expression -> BOOLEAN','expression',1,'p_expression_boolean_constant','parser.py',198),
  ('expression -> STRING','expression',1,'p_expression_string_constant','parser.py',204),
  ('expression -> SELF','expression',1,'p_expr_self','parser.py',210),
  ('expression -> LBRACE block_list RBRACE','expression',3,'p_expression_block','parser.py',216),
  ('block_list -> block_list expression SEMICOLON','block_list',3,'p_block_list','parser.py',222),
  ('block_list -> expression SEMICOLON','block_list',2,'p_block_list','parser.py',223),
  ('expression -> ID ASSIGN expression','expression',3,'p_expression_assignment','parser.py',232),
  ('expression -> expression DOT ID LPAREN arguments_list_opt RPAREN','expression',6,'p_expression_dispatch','parser.py',240),
  ('arguments_list_opt -> arguments_list','arguments_list_opt',1,'p_arguments_list_opt','parser.py',246),
  ('arguments_list_opt -> empty','arguments_list_opt',1,'p_arguments_list_opt','parser.py',247),
  ('arguments_list -> arguments_list COMMA expression','arguments_list',3,'p_arguments_list','parser.py',253),
  ('arguments_list -> expression','arguments_list',1,'p_arguments_list','parser.py',254),
  ('expression -> expression AT TYPE DOT ID LPAREN arguments_list_opt RPAREN','expression',8,'p_expression_static_dispatch','parser.py',263),
  ('expression -> ID LPAREN arguments_list_opt RPAREN','expression',4,'p_expression_self_dispatch','parser.py',269),
  ('expression -> expression PLUS expression','expression',3,'p_expression_math_operations','parser.py',277),
  ('expression -> expression MINUS expression','expression',3,'p_expression_math_operations','parser.py',278),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_math_operations','parser.py',279),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_math_operations','parser.py',280),
  ('expression -> expression LT expression','expression',3,'p_expression_math_comparisons','parser.py',293),
  ('expression -> expression LTEQ expression','expression',3,'p_expression_math_comparisons','parser.py',294),
  ('expression -> expression EQ expression','expression',3,'p_expression_math_comparisons','parser.py',295),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_with_parenthesis','parser.py',306),
  ('expression -> IF expression THEN expression ELSE expression FI','expression',7,'p_expression_if_conditional','parser.py',314),
  ('expression -> WHILE expression LOOP expression POOL','expression',5,'p_expression_while_loop','parser.py',320),
  ('expression -> let_expression','expression',1,'p_expression_let','parser.py',328),
  ('let_expression -> LET ID COLON TYPE IN expression','let_expression',6,'p_expression_let_simple','parser.py',334),
  ('let_expression -> nested_lets COMMA LET ID COLON TYPE','let_expression',6,'p_expression_let_simple','parser.py',335),
  ('let_expression -> LET ID COLON TYPE ASSIGN expression IN expression','let_expression',8,'p_expression_let_initialized','parser.py',341),
  ('let_expression -> nested_lets COMMA LET ID COLON TYPE ASSIGN expression','let_expression',8,'p_expression_let_initialized','parser.py',342),
  ('nested_lets -> ID COLON TYPE IN expression','nested_lets',5,'p_inner_lets_simple','parser.py',348),
  ('nested_lets -> nested_lets COMMA ID COLON TYPE','nested_lets',5,'p_inner_lets_simple','parser.py',349),
  ('nested_lets -> ID COLON TYPE ASSIGN expression IN expression','nested_lets',7,'p_inner_lets_initialized','parser.py',355),
  ('nested_lets -> nested_lets COMMA ID COLON TYPE ASSIGN expression','nested_lets',7,'p_inner_lets_initialized','parser.py',356),
  ('expression -> CASE expression OF actions_list ESAC','expression',5,'p_expression_case','parser.py',364),
  ('actions_list -> actions_list action','actions_list',2,'p_actions_list','parser.py',370),
  ('actions_list -> action','actions_list',1,'p_actions_list','parser.py',371),
  ('action -> ID COLON TYPE ARROW expression SEMICOLON','action',6,'p_action_expr','parser.py',380),
  ('expression -> NEW TYPE','expression',2,'p_expression_new','parser.py',388),
  ('expression -> ISVOID expression','expression',2,'p_expression_isvoid','parser.py',394),
  ('expression -> INT_COMP expression','expression',2,'p_expression_integer_complement','parser.py',400),
  ('expression -> NOT expression','expression',2,'p_expression_boolean_complement','parser.py',406),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',414),
]
