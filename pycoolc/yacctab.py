
# yacctab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNrightNOTnonassocLTEQLTEQleftPLUSMINUSleftMULTIPLYDIVIDErightISVOIDrightINT_COMPleftATleftDOTID TYPE INTEGER STRING BOOLEAN LPAREN RPAREN LBRACE RBRACE COLON COMMA DOT SEMICOLON AT PLUS MINUS MULTIPLY DIVIDE EQ LT LTEQ ASSIGN INT_COMP NOT ARROW CLASS ESAC SELF POOL IN WHILE FI NEW IF THEN LOOP OF ELSE INHERITS CASE LET ISVOID\n        program : class_list\n        \n        class_list : class_list class SEMICOLON\n                   | class SEMICOLON\n        \n        class : CLASS TYPE LBRACE features_list_opt RBRACE\n        \n        class : CLASS TYPE INHERITS TYPE LBRACE features_list_opt RBRACE\n        \n        features_list_opt : features_list\n                          | empty\n        \n        features_list : features_list feature SEMICOLON\n                      | feature SEMICOLON\n        \n        feature : ID LPAREN formal_params_list RPAREN COLON TYPE LBRACE expression RBRACE\n        \n        feature : ID LPAREN RPAREN COLON TYPE LBRACE expression RBRACE\n        \n        feature : ID COLON TYPE ASSIGN expression\n        \n        feature : ID COLON TYPE\n        \n        formal_params_list  : formal_params_list COMMA formal_param\n                            | formal_param\n        \n        formal_param : ID COLON TYPE\n        \n        expression : ID\n        \n        expression : INTEGER\n        \n        expression : BOOLEAN\n        \n        expression : STRING\n        \n        expression  : SELF\n        \n        expression : LBRACE block_list RBRACE\n        \n        block_list : block_list expression SEMICOLON\n                   | expression SEMICOLON\n        \n        expression : ID ASSIGN expression\n        \n        expression : expression DOT ID LPAREN arguments_list_opt RPAREN\n        \n        arguments_list_opt : arguments_list\n                           | empty\n        \n        arguments_list : arguments_list COMMA expression\n                       | expression\n        \n        expression : expression AT TYPE DOT ID LPAREN arguments_list_opt RPAREN\n        \n        expression : ID LPAREN arguments_list_opt RPAREN\n        \n        expression : expression PLUS expression\n                   | expression MINUS expression\n                   | expression MULTIPLY expression\n                   | expression DIVIDE expression\n        \n        expression : expression LT expression\n                   | expression LTEQ expression\n                   | expression EQ expression\n        \n        expression : LPAREN expression RPAREN\n        \n        expression : IF expression THEN expression ELSE expression FI\n        \n        expression : WHILE expression LOOP expression POOL\n        \n         expression : let_expression\n        \n        let_expression : LET ID COLON TYPE IN expression\n                       | nested_lets COMMA LET ID COLON TYPE\n        \n        let_expression : LET ID COLON TYPE ASSIGN expression IN expression\n                       | nested_lets COMMA LET ID COLON TYPE ASSIGN expression\n        \n        nested_lets : ID COLON TYPE IN expression\n                    | nested_lets COMMA ID COLON TYPE\n        \n        nested_lets : ID COLON TYPE ASSIGN expression IN expression\n                    | nested_lets COMMA ID COLON TYPE ASSIGN expression\n        \n        expression : CASE expression OF actions_list ESAC\n        \n        actions_list : actions_list action\n                     | action\n        \n        action : ID COLON TYPE ARROW expression SEMICOLON\n        \n        expression : NEW TYPE\n        \n        expression : ISVOID expression\n        \n        expression : INT_COMP expression\n        \n        expression : NOT expression\n        \n        empty :\n        '
    
_lr_action_items = {'ARROW':([150,],[157,]),'PLUS':([40,47,49,52,55,56,57,71,72,73,74,75,77,78,79,80,85,86,87,90,91,92,93,94,101,102,103,106,110,111,118,119,124,135,138,140,141,142,144,145,146,148,149,154,156,158,159,160,161,162,],[60,-19,-21,-18,-43,-17,-20,-56,-57,60,60,60,60,-58,60,60,60,-33,-36,60,-34,60,-35,60,60,-22,-40,60,60,60,60,60,-32,-42,-52,60,60,60,-26,60,60,-45,60,60,-41,60,-31,60,60,60,]),'TYPE':([4,9,20,33,34,37,43,62,82,95,116,134,137,],[7,11,29,38,39,58,71,88,109,115,133,148,150,]),'LTEQ':([40,47,49,52,55,56,57,71,72,73,74,75,77,78,79,80,85,86,87,90,91,92,93,94,101,102,103,106,110,111,118,119,124,135,138,140,141,142,144,145,146,148,149,154,156,158,159,160,161,162,],[68,-19,-21,-18,-43,-17,-20,-56,-57,68,68,68,68,-58,68,68,68,-33,-36,None,-34,None,-35,None,68,-22,-40,68,68,68,68,68,-32,-42,-52,68,68,68,-26,68,68,-45,68,68,-41,68,-31,68,68,68,]),'ESAC':([122,123,139,163,],[-54,138,-53,-55,]),'SELF':([35,44,45,46,48,50,51,53,54,59,60,61,64,65,66,67,68,76,81,83,84,98,99,100,114,120,125,126,127,131,132,136,143,147,151,153,155,157,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-24,49,-23,49,49,49,49,49,49,49,49,49,49,49,49,]),'OF':([47,49,52,55,56,57,71,72,77,78,80,86,87,90,91,92,93,94,102,103,110,124,135,138,144,146,148,156,159,160,161,],[-19,-21,-18,-43,-17,-20,-56,-57,-59,-58,104,-33,-36,-39,-34,-37,-35,-38,-22,-40,-25,-32,-42,-52,-26,-44,-45,-41,-31,-46,-47,]),'CLASS':([0,2,5,8,],[4,4,-3,-2,]),'DIVIDE':([40,47,49,52,55,56,57,71,72,73,74,75,77,78,79,80,85,86,87,90,91,92,93,94,101,102,103,106,110,111,118,119,124,135,138,140,141,142,144,145,146,148,149,154,156,158,159,160,161,162,],[61,-19,-21,-18,-43,-17,-20,-56,-57,61,61,61,61,-58,61,61,61,61,-36,61,61,61,-35,61,61,-22,-40,61,61,61,61,61,-32,-42,-52,61,61,61,-26,61,61,-45,61,61,-41,61,-31,61,61,61,]),'$end':([2,3,5,8,],[-1,0,-3,-2,]),'NOT':([35,44,45,46,48,50,51,53,54,59,60,61,64,65,66,67,68,76,81,83,84,98,99,100,114,120,125,126,127,131,132,136,143,147,151,153,155,157,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-24,50,-23,50,50,50,50,50,50,50,50,50,50,50,50,]),'COLON':([13,26,27,32,56,69,96,117,121,],[20,33,34,37,82,95,116,134,137,]),'EQ':([40,47,49,52,55,56,57,71,72,73,74,75,77,78,79,80,85,86,87,90,91,92,93,94,101,102,103,106,110,111,118,119,124,135,138,140,141,142,144,145,146,148,149,154,156,158,159,160,161,162,],[64,-19,-21,-18,-43,-17,-20,-56,-57,64,64,64,64,-58,64,64,64,-33,-36,None,-34,None,-35,None,64,-22,-40,64,64,64,64,64,-32,-42,-52,64,64,64,-26,64,64,-45,64,64,-41,64,-31,64,64,64,]),'INT_COMP':([35,44,45,46,48,50,51,53,54,59,60,61,64,65,66,67,68,76,81,83,84,98,99,100,114,120,125,126,127,131,132,136,143,147,151,153,155,157,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-24,51,-23,51,51,51,51,51,51,51,51,51,51,51,51,]),'LET':([35,44,45,46,48,50,51,53,54,59,60,61,64,65,66,67,68,70,76,81,83,84,98,99,100,114,120,125,126,127,131,132,136,143,147,151,153,155,157,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,97,41,41,41,41,41,41,-24,41,-23,41,41,41,41,41,41,41,41,41,41,41,41,]),'IN':([47,49,52,55,56,57,71,72,77,78,86,87,90,91,92,93,94,102,103,109,110,115,124,135,138,141,144,145,146,148,156,159,160,161,],[-19,-21,-18,-43,-17,-20,-56,-57,-59,-58,-33,-36,-39,-34,-37,-35,-38,-22,-40,127,-25,132,-32,-42,-52,151,-26,153,-44,-45,-41,-31,-46,-47,]),'MULTIPLY':([40,47,49,52,55,56,57,71,72,73,74,75,77,78,79,80,85,86,87,90,91,92,93,94,101,102,103,106,110,111,118,119,124,135,138,140,141,142,144,145,146,148,149,154,156,158,159,160,161,162,],[67,-19,-21,-18,-43,-17,-20,-56,-57,67,67,67,67,-58,67,67,67,67,-36,67,67,67,-35,67,67,-22,-40,67,67,67,67,67,-32,-42,-52,67,67,67,-26,67,67,-45,67,67,-41,67,-31,67,67,67,]),'ISVOID':([35,44,45,46,48,50,51,53,54,59,60,61,64,65,66,67,68,76,81,83,84,98,99,100,114,120,125,126,127,131,132,136,143,147,151,153,155,157,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-24,44,-23,44,44,44,44,44,44,44,44,44,44,44,44,]),'LT':([40,47,49,52,55,56,57,71,72,73,74,75,77,78,79,80,85,86,87,90,91,92,93,94,101,102,103,106,110,111,118,119,124,135,138,140,141,142,144,145,146,148,149,154,156,158,159,160,161,162,],[66,-19,-21,-18,-43,-17,-20,-56,-57,66,66,66,66,-58,66,66,66,-33,-36,None,-34,None,-35,None,66,-22,-40,66,66,66,66,66,-32,-42,-52,66,66,66,-26,66,66,-45,66,66,-41,66,-31,66,66,66,]),'NEW':([35,44,45,46,48,50,51,53,54,59,60,61,64,65,66,67,68,76,81,83,84,98,99,100,114,120,125,126,127,131,132,136,143,147,151,153,155,157,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-24,43,-23,43,43,43,43,43,43,43,43,43,43,43,43,]),'WHILE':([35,44,45,46,48,50,51,53,54,59,60,61,64,65,66,67,68,76,81,83,84,98,99,100,114,120,125,126,127,131,132,136,143,147,151,153,155,157,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-24,45,-23,45,45,45,45,45,45,45,45,45,45,45,45,]),'LPAREN':([13,35,44,45,46,48,50,51,53,54,56,59,60,61,64,65,66,67,68,76,81,83,84,89,98,99,100,114,120,125,126,127,129,131,132,136,143,147,151,153,155,157,],[19,53,53,53,53,53,53,53,53,53,81,53,53,53,53,53,53,53,53,53,53,53,53,114,53,53,-24,53,-23,53,53,53,143,53,53,53,53,53,53,53,53,53,]),'CASE':([35,44,45,46,48,50,51,53,54,59,60,61,64,65,66,67,68,76,81,83,84,98,99,100,114,120,125,126,127,131,132,136,143,147,151,153,155,157,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-24,54,-23,54,54,54,54,54,54,54,54,54,54,54,54,]),'ASSIGN':([29,56,109,115,133,148,],[35,83,126,131,147,155,]),'COMMA':([25,28,36,39,42,47,49,52,55,56,57,71,72,77,78,86,87,90,91,92,93,94,102,103,106,108,110,124,133,135,138,140,142,144,146,148,154,156,158,159,160,161,],[31,-15,-14,-16,70,-19,-21,-18,-43,-17,-20,-56,-57,-59,-58,-33,-36,-39,-34,-37,-35,-38,-22,-40,-30,125,-25,-32,-49,-42,-52,-29,-48,-26,-44,-45,-51,-41,-50,-31,-46,-47,]),'SEMICOLON':([1,6,15,18,22,29,30,40,47,49,52,55,56,57,71,72,75,77,78,86,87,90,91,92,93,94,101,102,103,110,112,124,128,135,138,144,146,148,156,159,160,161,162,],[5,8,21,24,-4,-13,-5,-12,-19,-21,-18,-43,-17,-20,-56,-57,100,-59,-58,-33,-36,-39,-34,-37,-35,-38,120,-22,-40,-25,-11,-32,-10,-42,-52,-26,-44,-45,-41,-31,-46,-47,163,]),'THEN':([47,49,52,55,56,57,71,72,74,77,78,86,87,90,91,92,93,94,102,103,110,124,135,138,144,146,148,156,159,160,161,],[-19,-21,-18,-43,-17,-20,-56,-57,99,-59,-58,-33,-36,-39,-34,-37,-35,-38,-22,-40,-25,-32,-42,-52,-26,-44,-45,-41,-31,-46,-47,]),'ID':([10,12,17,19,21,24,31,35,41,44,45,46,48,50,51,53,54,59,60,61,63,64,65,66,67,68,70,76,81,83,84,97,98,99,100,104,113,114,120,122,123,125,126,127,131,132,136,139,143,147,151,153,155,157,163,],[13,13,13,27,-9,-8,27,56,69,56,56,56,56,56,56,56,56,56,56,56,89,56,56,56,56,56,96,56,56,56,56,117,56,56,-24,121,129,56,-23,-54,121,56,56,56,56,56,56,-53,56,56,56,56,56,56,-55,]),'IF':([35,44,45,46,48,50,51,53,54,59,60,61,64,65,66,67,68,76,81,83,84,98,99,100,114,120,125,126,127,131,132,136,143,147,151,153,155,157,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-24,46,-23,46,46,46,46,46,46,46,46,46,46,46,46,]),'AT':([40,47,49,52,55,56,57,71,72,73,74,75,77,78,79,80,85,86,87,90,91,92,93,94,101,102,103,106,110,111,118,119,124,135,138,140,141,142,144,145,146,148,149,154,156,158,159,160,161,162,],[62,-19,-21,-18,-43,-17,-20,-56,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-22,-40,62,62,62,62,62,-32,-42,-52,62,62,62,-26,62,62,-45,62,62,-41,62,-31,62,62,62,]),'INTEGER':([35,44,45,46,48,50,51,53,54,59,60,61,64,65,66,67,68,76,81,83,84,98,99,100,114,120,125,126,127,131,132,136,143,147,151,153,155,157,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-24,52,-23,52,52,52,52,52,52,52,52,52,52,52,52,]),'LOOP':([47,49,52,55,56,57,71,72,73,77,78,86,87,90,91,92,93,94,102,103,110,124,135,138,144,146,148,156,159,160,161,],[-19,-21,-18,-43,-17,-20,-56,-57,98,-59,-58,-33,-36,-39,-34,-37,-35,-38,-22,-40,-25,-32,-42,-52,-26,-44,-45,-41,-31,-46,-47,]),'DOT':([40,47,49,52,55,56,57,71,72,73,74,75,77,78,79,80,85,86,87,88,90,91,92,93,94,101,102,103,106,110,111,118,119,124,135,138,140,141,142,144,145,146,148,149,154,156,158,159,160,161,162,],[63,-19,-21,-18,-43,-17,-20,-56,63,63,63,63,63,63,63,63,63,63,63,113,63,63,63,63,63,63,-22,-40,63,63,63,63,63,-32,-42,-52,63,63,63,-26,63,63,-45,63,63,-41,63,-31,63,63,63,]),'RBRACE':([10,12,14,16,17,21,23,24,47,49,52,55,56,57,71,72,76,77,78,85,86,87,90,91,92,93,94,100,102,103,110,111,120,124,135,138,144,146,148,156,159,160,161,],[-60,-6,-7,22,-60,-9,30,-8,-19,-21,-18,-43,-17,-20,-56,-57,102,-59,-58,112,-33,-36,-39,-34,-37,-35,-38,-24,-22,-40,-25,128,-23,-32,-42,-52,-26,-44,-45,-41,-31,-46,-47,]),'BOOLEAN':([35,44,45,46,48,50,51,53,54,59,60,61,64,65,66,67,68,76,81,83,84,98,99,100,114,120,125,126,127,131,132,136,143,147,151,153,155,157,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-24,47,-23,47,47,47,47,47,47,47,47,47,47,47,47,]),'POOL':([47,49,52,55,56,57,71,72,77,78,86,87,90,91,92,93,94,102,103,110,118,124,135,138,144,146,148,156,159,160,161,],[-19,-21,-18,-43,-17,-20,-56,-57,-59,-58,-33,-36,-39,-34,-37,-35,-38,-22,-40,-25,135,-32,-42,-52,-26,-44,-45,-41,-31,-46,-47,]),'RPAREN':([19,25,28,36,39,47,49,52,55,56,57,71,72,77,78,79,81,86,87,90,91,92,93,94,102,103,105,106,107,108,110,114,124,130,135,138,140,143,144,146,148,152,156,159,160,161,],[26,32,-15,-14,-16,-19,-21,-18,-43,-17,-20,-56,-57,-59,-58,103,-60,-33,-36,-39,-34,-37,-35,-38,-22,-40,124,-30,-28,-27,-25,-60,-32,144,-42,-52,-29,-60,-26,-44,-45,159,-41,-31,-46,-47,]),'INHERITS':([7,],[9,]),'ELSE':([47,49,52,55,56,57,71,72,77,78,86,87,90,91,92,93,94,102,103,110,119,124,135,138,144,146,148,156,159,160,161,],[-19,-21,-18,-43,-17,-20,-56,-57,-59,-58,-33,-36,-39,-34,-37,-35,-38,-22,-40,-25,136,-32,-42,-52,-26,-44,-45,-41,-31,-46,-47,]),'MINUS':([40,47,49,52,55,56,57,71,72,73,74,75,77,78,79,80,85,86,87,90,91,92,93,94,101,102,103,106,110,111,118,119,124,135,138,140,141,142,144,145,146,148,149,154,156,158,159,160,161,162,],[65,-19,-21,-18,-43,-17,-20,-56,-57,65,65,65,65,-58,65,65,65,-33,-36,65,-34,65,-35,65,65,-22,-40,65,65,65,65,65,-32,-42,-52,65,65,65,-26,65,65,-45,65,65,-41,65,-31,65,65,65,]),'LBRACE':([7,11,35,38,44,45,46,48,50,51,53,54,58,59,60,61,64,65,66,67,68,76,81,83,84,98,99,100,114,120,125,126,127,131,132,136,143,147,151,153,155,157,],[10,17,48,59,48,48,48,48,48,48,48,48,84,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-24,48,-23,48,48,48,48,48,48,48,48,48,48,48,48,]),'FI':([47,49,52,55,56,57,71,72,77,78,86,87,90,91,92,93,94,102,103,110,124,135,138,144,146,148,149,156,159,160,161,],[-19,-21,-18,-43,-17,-20,-56,-57,-59,-58,-33,-36,-39,-34,-37,-35,-38,-22,-40,-25,-32,-42,-52,-26,-44,-45,156,-41,-31,-46,-47,]),'STRING':([35,44,45,46,48,50,51,53,54,59,60,61,64,65,66,67,68,76,81,83,84,98,99,100,114,120,125,126,127,131,132,136,143,147,151,153,155,157,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-24,57,-23,57,57,57,57,57,57,57,57,57,57,57,57,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'class':([0,2,],[1,6,]),'nested_lets':([35,44,45,46,48,50,51,53,54,59,60,61,64,65,66,67,68,76,81,83,84,98,99,114,125,126,127,131,132,136,143,147,151,153,155,157,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'program':([0,],[3,]),'formal_params_list':([19,],[25,]),'features_list':([10,17,],[12,12,]),'actions_list':([104,],[123,]),'action':([104,123,],[122,139,]),'formal_param':([19,31,],[28,36,]),'expression':([35,44,45,46,48,50,51,53,54,59,60,61,64,65,66,67,68,76,81,83,84,98,99,114,125,126,127,131,132,136,143,147,151,153,155,157,],[40,72,73,74,75,77,78,79,80,85,86,87,90,91,92,93,94,101,106,110,111,118,119,106,140,141,142,145,146,149,106,154,158,160,161,162,]),'feature':([10,12,17,],[15,18,15,]),'class_list':([0,],[2,]),'empty':([10,17,81,114,143,],[14,14,107,107,107,]),'block_list':([48,],[76,]),'features_list_opt':([10,17,],[16,23,]),'let_expression':([35,44,45,46,48,50,51,53,54,59,60,61,64,65,66,67,68,76,81,83,84,98,99,114,125,126,127,131,132,136,143,147,151,153,155,157,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'arguments_list':([81,114,143,],[108,108,108,]),'arguments_list_opt':([81,114,143,],[105,130,152,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class_list','program',1,'p_program','parser.py',100),
  ('class_list -> class_list class SEMICOLON','class_list',3,'p_class_list','parser.py',107),
  ('class_list -> class SEMICOLON','class_list',2,'p_class_list','parser.py',108),
  ('class -> CLASS TYPE LBRACE features_list_opt RBRACE','class',5,'p_class','parser.py',117),
  ('class -> CLASS TYPE INHERITS TYPE LBRACE features_list_opt RBRACE','class',7,'p_class_inherits','parser.py',123),
  ('features_list_opt -> features_list','features_list_opt',1,'p_feature_list_opt','parser.py',129),
  ('features_list_opt -> empty','features_list_opt',1,'p_feature_list_opt','parser.py',130),
  ('features_list -> features_list feature SEMICOLON','features_list',3,'p_feature_list','parser.py',136),
  ('features_list -> feature SEMICOLON','features_list',2,'p_feature_list','parser.py',137),
  ('feature -> ID LPAREN formal_params_list RPAREN COLON TYPE LBRACE expression RBRACE','feature',9,'p_feature_method','parser.py',146),
  ('feature -> ID LPAREN RPAREN COLON TYPE LBRACE expression RBRACE','feature',8,'p_feature_method_no_formals','parser.py',152),
  ('feature -> ID COLON TYPE ASSIGN expression','feature',5,'p_feature_attr_initialized','parser.py',158),
  ('feature -> ID COLON TYPE','feature',3,'p_feature_attr','parser.py',164),
  ('formal_params_list -> formal_params_list COMMA formal_param','formal_params_list',3,'p_formal_list_many','parser.py',170),
  ('formal_params_list -> formal_param','formal_params_list',1,'p_formal_list_many','parser.py',171),
  ('formal_param -> ID COLON TYPE','formal_param',3,'p_formal','parser.py',180),
  ('expression -> ID','expression',1,'p_expression_object_identifier','parser.py',186),
  ('expression -> INTEGER','expression',1,'p_expression_integer_constant','parser.py',192),
  ('expression -> BOOLEAN','expression',1,'p_expression_boolean_constant','parser.py',198),
  ('expression -> STRING','expression',1,'p_expression_string_constant','parser.py',204),
  ('expression -> SELF','expression',1,'p_expr_self','parser.py',210),
  ('expression -> LBRACE block_list RBRACE','expression',3,'p_expression_block','parser.py',216),
  ('block_list -> block_list expression SEMICOLON','block_list',3,'p_block_list','parser.py',222),
  ('block_list -> expression SEMICOLON','block_list',2,'p_block_list','parser.py',223),
  ('expression -> ID ASSIGN expression','expression',3,'p_expression_assignment','parser.py',232),
  ('expression -> expression DOT ID LPAREN arguments_list_opt RPAREN','expression',6,'p_expression_dispatch','parser.py',240),
  ('arguments_list_opt -> arguments_list','arguments_list_opt',1,'p_arguments_list_opt','parser.py',246),
  ('arguments_list_opt -> empty','arguments_list_opt',1,'p_arguments_list_opt','parser.py',247),
  ('arguments_list -> arguments_list COMMA expression','arguments_list',3,'p_arguments_list','parser.py',253),
  ('arguments_list -> expression','arguments_list',1,'p_arguments_list','parser.py',254),
  ('expression -> expression AT TYPE DOT ID LPAREN arguments_list_opt RPAREN','expression',8,'p_expression_static_dispatch','parser.py',263),
  ('expression -> ID LPAREN arguments_list_opt RPAREN','expression',4,'p_expression_self_dispatch','parser.py',269),
  ('expression -> expression PLUS expression','expression',3,'p_expression_math_operations','parser.py',277),
  ('expression -> expression MINUS expression','expression',3,'p_expression_math_operations','parser.py',278),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_math_operations','parser.py',279),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_math_operations','parser.py',280),
  ('expression -> expression LT expression','expression',3,'p_expression_math_comparisons','parser.py',293),
  ('expression -> expression LTEQ expression','expression',3,'p_expression_math_comparisons','parser.py',294),
  ('expression -> expression EQ expression','expression',3,'p_expression_math_comparisons','parser.py',295),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_with_parenthesis','parser.py',306),
  ('expression -> IF expression THEN expression ELSE expression FI','expression',7,'p_expression_if_conditional','parser.py',314),
  ('expression -> WHILE expression LOOP expression POOL','expression',5,'p_expression_while_loop','parser.py',320),
  ('expression -> let_expression','expression',1,'p_expression_let','parser.py',328),
  ('let_expression -> LET ID COLON TYPE IN expression','let_expression',6,'p_expression_let_simple','parser.py',334),
  ('let_expression -> nested_lets COMMA LET ID COLON TYPE','let_expression',6,'p_expression_let_simple','parser.py',335),
  ('let_expression -> LET ID COLON TYPE ASSIGN expression IN expression','let_expression',8,'p_expression_let_initialized','parser.py',341),
  ('let_expression -> nested_lets COMMA LET ID COLON TYPE ASSIGN expression','let_expression',8,'p_expression_let_initialized','parser.py',342),
  ('nested_lets -> ID COLON TYPE IN expression','nested_lets',5,'p_inner_lets_simple','parser.py',348),
  ('nested_lets -> nested_lets COMMA ID COLON TYPE','nested_lets',5,'p_inner_lets_simple','parser.py',349),
  ('nested_lets -> ID COLON TYPE ASSIGN expression IN expression','nested_lets',7,'p_inner_lets_initialized','parser.py',355),
  ('nested_lets -> nested_lets COMMA ID COLON TYPE ASSIGN expression','nested_lets',7,'p_inner_lets_initialized','parser.py',356),
  ('expression -> CASE expression OF actions_list ESAC','expression',5,'p_expression_case','parser.py',364),
  ('actions_list -> actions_list action','actions_list',2,'p_actions_list','parser.py',370),
  ('actions_list -> action','actions_list',1,'p_actions_list','parser.py',371),
  ('action -> ID COLON TYPE ARROW expression SEMICOLON','action',6,'p_action_expr','parser.py',380),
  ('expression -> NEW TYPE','expression',2,'p_expression_new','parser.py',388),
  ('expression -> ISVOID expression','expression',2,'p_expression_isvoid','parser.py',394),
  ('expression -> INT_COMP expression','expression',2,'p_expression_integer_complement','parser.py',400),
  ('expression -> NOT expression','expression',2,'p_expression_boolean_complement','parser.py',406),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',414),
]
